<?php

require_once('user-forms.inc');

// $Id$
global $base_url;
global $user;

/*
Query Debug:
print_r($query->__toString());
print_r($query->arguments());
*/
 
/*
 * 
// Username und Vorname an Javascript übergeben:

	$uid = $user->uid;

	$userdata = boucado_get_userdata($uid);
	$boucado_settings = array('username' => $userdata->user);	
	drupal_add_js(array('boucado' => $boucado_settings), 'setting');	
*/

function boucado_permission() {
  return array(
    'access own boucado' => array(
      'title' => t('Access own BOUCADO'),
    ),
    'access all boucado' => array(
      'title' => t('Access all BOUCADOs'),
    ),
  );
}


function boucado_menu() {
    $items = array();
	
/*
  $items['admin/boucado'] = array(
    'title' => 'BOUCADO',
    'description' => 'This is the parent item',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  // Need at least one child item before your section will appear.
  $items['admin/boucado/sync'] = array(
    'title' => 'User Synchronization',
    'description' => 'Drupal <-> RUNMLM synchronize',
    'page callback' => 'boucado_sync_users',
    'access arguments' => array('administer site configuration'),
  );

 */
  
  $items['boucado/downline/%'] = array(
    'title' => 'My Downline',
    'description' => 'My BOUCADO downline',
    'page callback' => 'boucado_downline',
    'page arguments' => array(2),
    'access arguments' => array('access all boucado'),
  );
  
  $items['boucado/downline'] = array(
    'title' => 'My Downline',
    'description' => 'My BOUCADO downline',
    'page callback' => 'boucado_downline',
    'page arguments' => array(2),    
    'access arguments' => array('access own boucado'),
  );
      	
  $items['boucado/position/%/%'] = array(
    'title' => 'New Position',
    'description' => 'Next free position',
    'page callback' => 'boucado_TestInsert',
    'page arguments' => array(2,3),
    'access arguments' => array('administer site configuration'),
  );


    $items['boucado/resettests'] = array(
        'title' => 'Testdaten gelöscht',
        'page callback' => 'boucado_resettests',
        'access arguments' => array('administer site configuration'),
        'type' => MENU_CALLBACK,
    );
	  	
    $items['join/%'] = array(
        'title' => 'Register',
        'page callback' => 'boucado_register',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
	
    $items['join'] = array(
        'title' => 'join',
        'page callback' => 'boucado_join',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );	

  $items['payment/success/%'] = array(
    'title' => t('Successful BOUCADO payment!'),
    'description' => t('Successful BOUCADO payment!'),
    'page callback' => 'boucado_payment_success',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  
  $items['payment/cancel'] = array(
    'title' => t('BOUCADO payment canceled'),
    'description' => t('BOUCADO payment canceled'),
    'page callback' => 'boucado_payment_cancel',
    'access arguments' => array('access content'),
  );
  
  
 
    $items['boucado/testform'] = array(
        'title' => t('BOUCADO Testform'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('boucado_test_form_form'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
	
	
    $items['boucado/user'] = array(
        'title' => t('BOUCADO User'),
        'page arguments' => array('0'),  
        'page callback' => 'boucado_userinfo',
        'access arguments' => array('access own boucado'),
        'type' => MENU_CALLBACK,
    );
	
    $items['boucado/user/%'] = array(
        'title' => t('BOUCADO User'),
        'page arguments' => array(2),  
        'page callback' => 'boucado_userinfo',
        'access arguments' => array('access all boucado'),
        'type' => MENU_CALLBACK,
    );
	
	return $items;
}

function boucado_join() {
	$_SESSION['sponsor_uid'] = "";
	$_SESSION['sponsor_name'] = "";
	boucado_register(1);
	drupal_goto('user/register');
}

function boucado_register($uid) {
	if (boucado_check_sponsor($uid)) {
		if (arg(2) == "") {
			drupal_goto('<front>');
		} else if (arg(2) == "register") {
			drupal_goto('user/register');
		} else {
			drupal_goto(arg(2));
		}			
	} else {
		return '<br>' . t('User "@uid" unknown.', array('@uid' => $uid));
	} 
}

function boucado_check_sponsor($uid) {
	$result = db_query("SELECT uid, name FROM {users} WHERE uid='" . $uid . "'");
	$user = $result->fetchAssoc();
	if ($user['uid']) {
		$_SESSION['sponsor_uid'] = $user['uid'];
		$_SESSION['sponsor_name'] = $user['name'];
		setcookie('sponsor_name', $user['name'], time() + 3600 * 24 * 180, '/');
		//print_r($_COOKIE['sponsor']);		
		return true;
	} else {
		$result = db_query("SELECT uid, name FROM {users} WHERE name='" . $uid . "'");
		$user = $result->fetchAssoc();
		if ($user['name']) {
			$_SESSION['sponsor_uid'] = $user['uid'];
			$_SESSION['sponsor_name'] = $user['name'];
			setcookie('sponsor_name', $user['name'], time() + 3600 * 24 * 180, '/');		
			return true;
		} else {
			$_SESSION['sponsor_uid'] = '';
			$_SESSION['sponsor_name'] = '';
			return false;
		}
	}
}

function boucado_get_username($member_id) {
// Member holen
	db_set_active('boucado_matrix');
	$query = db_select('members', 'm');
	$query
		->fields('m')
  		->condition('m.member_id', $member_id, '=')
  		->range(0, 1);
	$result = $query->execute();
	db_set_active();
	
	foreach ($result as $record) {
  		$thisuser = $record;
	}	
	return $thisuser->username;
}

function boucado_get_userdata($username) {
global $user;
	
	if ($username=="") {$username = $user->name;}

	if ($username=="Demo") {

		$thisuser = new stdClass();
		$thisuser->member_id=0;
		$thisuser->username="demo";
		$thisuser->first_name="Demo";
		$thisuser->last_name="Demo";
		$thisuser->street="Demostreet";
		$thisuser->postal="10000";
		$thisuser->city="Democity";
		$thisuser->country="Democountry";
		$thisuser->phone="123456";
		$thisuser->email="demo@demo.com";
		$thisuser->sponsor = 'admin';
		$thisuser->sponsor_id = '1';
		$thisuser->sponsor_first_name = 'BOUCADO';
		$thisuser->sponsor_last_name = 'Admin';
		$thisuser->upline = 'admin';
		$thisuser->upline_id = '1';
		$thisuser->upline_first_name = 'BOUCADO';
		$thisuser->upline_last_name = 'Admin';		
		
		return $thisuser;
	}

// Member holen
	db_set_active('boucado_matrix');
	$query = db_select('members', 'm');
	$query
		->fields('m')
  		->condition('m.username', $username, '=')
  		->range(0, 1);
	$result = $query->execute();
	db_set_active();
	
	foreach ($result as $record) {
  		$thisuser = $record;
	}

 // Sponsor holen:
 	if ($thisuser->member_id > 1) {
 	db_set_active('boucado_matrix');
 	$query = db_select('members', 'm');
	$query
		->fields('m')
  		->condition('m.member_id', $thisuser->enroller_id, '=')
  		->range(0, 1);
	$result = $query->execute();

	db_set_active();
		
	foreach ($result as $record) {
  		$sponsor = $record;
	}

	$thisuser->sponsor = $sponsor->username;
	$thisuser->sponsor_id = $sponsor->member_id;
	$thisuser->sponsor_first_name = $sponsor->first_name;
	$thisuser->sponsor_last_name = $sponsor->last_name;
	
	} else { // der Admin
		$thisuser->sponsor = 'admin';
		$thisuser->sponsor_id = '1';
		$thisuser->sponsor_first_name = 'BOUCADO';
		$thisuser->sponsor_last_name = 'Admin';
	}
	
 // Upline holen
 
  	if ($thisuser->member_id > 1) { // nicht der Admin
	 	db_set_active('boucado_matrix');
	 	$query = db_select('matrix', 'm');
		$query
			->fields('m')
	  		->condition('m.member_id', $thisuser->member_id, '=')
	  		->range(0, 1);
		$result = $query->execute();

		if ($result->rowCount()) {	
			foreach ($result as $record) {
		  		$upline_id = $record;
			}
		
		 	$query = db_select('members', 'm');
			$query
				->fields('m')
		  		->condition('m.member_id', $upline_id->host_id, '=')
		  		->range(0, 1);
			$result = $query->execute();
		
			foreach ($result as $record) {
		  		$upline = $record;
			}
			
			$thisuser->upline = $upline->username;
			$thisuser->upline_id = $upline->member_id;
			$thisuser->upline_first_name = $upline->first_name;
			$thisuser->upline_last_name = $upline->last_name;
		} else { // noch nicht platzert
			$thisuser->upline = '';
			$thisuser->upline_id = -1;
			$thisuser->upline_first_name = '';
			$thisuser->upline_last_name = '';			
		}
		db_set_active();	
	} else { // der Admin
		$thisuser->upline = 'admin';
		$thisuser->upline_id = '1';
		$thisuser->upline_first_name = 'BOUCADO';
		$thisuser->upline_last_name = 'Admin';
	}
	

	return $thisuser;
}


function boucado_sync_users(){
	
	// Zuerst alle Drupal user nach boucado_matrix kopieren:
	$sql = "SELECT uid, name FROM {users} WHERE uid>0";

	$result = db_query($sql)->fetchAll();
	
	$output = "";
	db_set_active('boucado_matrix');
	db_truncate('drupal_users')->execute();
	
	  foreach ($result as $row) { 
		$sql = "INSERT INTO drupal_users (uid,name) VALUES('" . $row->uid . "','" . $row->name . "')";
		$ok = db_query($sql);

	  }  

	// Dann alle neuen Members suchen und ev. neu in Drupal anlegen:
	$sql = "SELECT username, email from members WHERE username NOT IN (SELECT name from drupal_users)";
	$result = db_query($sql)->fetchAll();

	if (!$result) {$output = "<h2>Keine neuen User angemeldet.</h2><p>&nbsp;</p>"; }

	db_set_active();	
	
	  foreach ($result as $row) { 
		//set up the user fields
		$fields = array(
		  'name' => $row->username,
		  'mail' => $row->email,
		  'pass' => $row->username,
		  'status' => 1,
		  'init' => $row->email,
		  'roles' => array(
		    DRUPAL_AUTHENTICATED_RID => 'authenticated user',
		  ),
		);
		 
		//the first parameter is left blank so a new user is created
		$account = user_save('', $fields);
		$output .= $account->uid . " -> " . $account->name . "</br>";		 
	  }  	
	
	return $output;
}


function boucado_mail($key, &$message, $params) {
  switch ($key) {
    case 'upline':
      // note: data can be passed to this function in the $params array
      $message['subject'] = "Deine BOUCADO Downline wächst!";
      $body = "Hallo " . $params['Uplinename'] . "!\n\nGratuliere, du hast ein neues Mitglied in deiner Downline bekommen:\n\n";
	  $body .= "Sponsor: ". $params['Sponsorname']. "\n\n";
	  $body .= "Username: ". $params['Neueruser']. "\n\n";
	  $body .= "\n\nDenk daran, jedes neue Mitglied kann für einen Wachstumsschub in Deiner gesamten Downline verantwortlich sein.\nAlso informiere so viele Menschen wie möglich über unseren Verein, um Deinen Nebenverdienst zu erhöhen.";
      $body .= "\n\nDein BOUCADO Team.";
      $message['body'] = $body;
      break;	  
   case 'neuer':
      $message['subject'] = "Neue Anmeldung bei BOUCADO: " . $params['Neueruser'];
      $body = "Sponsor: " . $params['Sponsorname']. "\n\n";
	  $body .= "Username: ". $params['Neueruser']. "\n\n";
      $message['body'] = $body;
      break;	    
  }    
}



function boucado_mynetworks($net_id, $membername) {

	$member = boucado_get_userdata($membername);
	
	db_set_active('boucado_matrix');
		
	$refdata = array();
	
	// Sponsor Links:
	$sponsorquery = db_select('network_members', 'm');
	$sponsorquery
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member->sponsor_id,'=');
	$sponsorresult = $sponsorquery->execute();		

	foreach ($sponsorresult as $sponsorrecord) {
		$refdata['sponsor']['first_name'] = $member->sponsor_first_name;
		$refdata['sponsor']['last_name'] = $member->sponsor_last_name;
		$refdata['sponsor']['referral'] = $sponsorrecord->referral;
	}
	
	
	// Upline Links:
	$uplinequery = db_select('network_members', 'm');
	$uplinequery
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member->upline_id,'=');
	$uplineresult = $uplinequery->execute();		

	foreach ($uplineresult as $uplinerecord) {
		$refdata['upline']['first_name'] = $member->upline_first_name;
		$refdata['upline']['last_name'] = $member->upline_last_name;
		$refdata['upline']['referral'] = $uplinerecord->referral;
	}
	
	// Eigener Links:
	$selfquery = db_select('network_members', 'm');
	$selfquery
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member->member_id,'=');
	$selfresult = $selfquery->execute();		
	
	foreach ($selfresult as $selfrecord) {
		$refdata['self']['referral'] = $selfrecord->referral;
	}
	$refdata['self']['member_id'] = $member->member_id;
	
	db_set_active();
	return $refdata;
	
}

function boucado_init() {
	
    drupal_add_css(drupal_get_path('module', 'boucado') . '/boucado.css');
}


function fdate($datetimestring = '1970-01-01 00:00:00', $format = 'U') {
  // Create a datetime object, return it formatted
  // If you want to give credit for this somewhere, thanks.
  // You really don't have to though; this is kinda obvious
  $dt = new DateTime($datetimestring);
  return $dt->format($format);
} 

function boucado_user_delete($account) {
	// Benutzer aus boucado matrix löschen
	db_set_active('boucado_matrix');

	$num_deleted = db_delete('members')
		->condition('username', $account->name)
		->execute();

	db_set_active();	
	
	drupal_set_message("Der Benutzer wurde aus der BOUCADO Matrix gelöscht.");

}

function boucado_sendmail() {

	$uid = $user->uid;
	$userdata = boucado_get_userdata($uid);
			
	// E-Mail senden:
	
	$params = array(
  		'Vorname' => $userdata['strVName_O'],
  		'Polizze' => $polizze
	);
	
	$to = $userdata['strEmail_O'] . ',office@boucado.space';
	
	$sent = drupal_mail('boucado', 'kuendigen', $to , language_default(), $params, 'office@boucado.space');
	
	if($sent){
		drupal_set_message('Ein E-Mail wurde zu Ihnen gesendet.', 'status');	
	} else {
		drupal_set_message('E-Mail konnte nicht gesendet werden.', 'error');
	}
	
}

function boucado_courses(){
	$output = "";
	db_set_active('boucado');
	
		
	$query = db_select('courses', 'c');
	$query
  		->fields('c', array('course', 'realname', 'par', 'CR_middle', 'slope_middle', 'URL', 'premium'))
  		->orderBy('c.course', 'ASC');
	$result = $query->execute();
	db_set_active();
		
	$output .= "<table id='tbl_courses'><tr><th>" . t('Course') . "</th><th>" . t('Real Name') . "</th><th>Par</th><th>CR</th><th>Slope</th><th>Premium</th></tr>";
	foreach ($result as $row) {
		if ($row->premium) {$premium = "*";} else {$premium = "";}
		$output .= "<tr><td>" . $row->course . "</td><td><a target='_blank' href='" . $row->URL . "'>" . $row->realname . "</a></td><td>" . $row->par. "</td><td>" . $row->CR_middle . "</td><td>" . $row->slope_middle . "</td><td>" . $premium . "</td></tr>";
	}
	$output .= "</table>";
	
	return $output;
}

function boucado_userinfo($uid) {
global $user;
	
	if($uid!='0') {
		$userdata = boucado_get_userdata($uid);
	} else {
		$uid = $user->uid;
		$userdata = boucado_get_userdata($uid);
	}
	
	$output = "Username: " . $userdata->user . "<br>";
	$output .= "Handicap: " . $userdata->hcp . "<br>";


	$output .= "<hr><br><h3>Letzte Runden:</h3>";
	$output .= "<div id='user_rounds'>";

	db_set_active('boucado_matrix');
	
$query = db_select('rounds')->extend('PagerDefault'); 
 $query->fields('rounds', array('id', 'course', 'date', 'score', 'hcpdiff'));    
 $query->condition('uid', $uid, '=');
 $query->orderBy('id', 'DESC');
 $result = $query ->limit(10)->execute()->fetchAll();
db_set_active();
 $output .= "<table id='tbl_rounds'><tr><th>Course</th><th>Date</th><th>Score</th><th>HCP Diff</th></tr>";
 foreach ($result as $row) {
	$output .= "<tr><td>" . $row->course . "</td><td>" . $row->date . "</td><td>" . $row->score . "</td><td>" . $row->hcpdiff . "</td></tr>";
 }
 $output .= "</table><br>"; 

$output .= theme('pager', array('tags' => array()));
$output .= "</div> <!-- user_rounds -->";
return $output; 

}

function boucado_network_form($form, &$form_state, $infos) {
		
	$net_id = $infos['net_id'];
	$member_id = $infos['member_id'];	
	$link = "";
		
	db_set_active('boucado_matrix');
	$query = db_select('network_members', 'm');
	$query
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member_id,'=');
	$result = $query->execute();		

	foreach ($result as $record) {
		$link = $record->referral;
	}
	
	db_set_active();
	
	$form['network']['net_id'] = array(
          '#type' => 'hidden',
          '#default_value' => $net_id,
            );
            
 	$form['network']['member_id'] = array(
          '#type' => 'hidden',
          '#default_value' => $member_id,
            );
				
	$form['network']['referral'] = array(
          '#type' => 'textfield',
          '#title' => t('Your referral code:'),
          '#default_value' => $link,
            );
            
    $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        );
        $form['#submit'][] = 'boucado_network_form_submit';

        return $form;
}

function boucado_network_form_submit($form, &$form_state) {
	$net_id = $form_state['values']['net_id'];
	$member_id = $form_state['values']['member_id'];
	$referral = $form_state['values']['referral'];
	
	db_set_active('boucado_matrix');
	$query = db_select('network_members', 'm');
	$query
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member_id,'=');
	$result = $query->execute();		

	if ($result->rowCount() > 0) {
		db_update('network_members')
			->fields(array('referral' => $referral,))
  			->condition('net_id', $net_id, '=')
			->condition('member_id', $member_id, '=')
  			->execute();
	} else {
		db_insert('network_members')
			->fields(array('net_id' => $net_id,'member_id' => $member_id,'referral' => $referral,))
			->execute();
	}
	db_set_active();
}   
	
function boucado_test_form_form($form, &$form_state, $no_js_use = FALSE) {

        $form['add_more'] = array(
          '#type' => 'button',
          '#value' => t('Add More'),
          '#ajax' => array(
            'callback' => 'boucado_test_form_ajax_simplest_callback',
            'wrapper' => 'replace-this',
            'method' => 'replace',
           ),
        );

        $form['names'] = array(
          '#type' => 'fieldset',
          '#title' => 'Names',
          '#prefix' => '<div id="replace-this">',
          '#suffix' => '</div>',
          '#tree' => TRUE,
        );

        // build the initial field if this is not being rebuilt 
        // from ajax request
        if (!array_key_exists('clicked_button', $form_state)) {
          $form['names'][0] = array('#type' => 'fieldset');
          $form['names'][0]['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Name'),
            '#parent' => 'test',
          );
          $form['names'][0]['select'] = array(
            '#type' => 'select',
            '#title' => t('Select'),
            '#parent' => 'test',
            '#options'=>array('1'=>'One', '2'=>'Two', '3'=>'Three'),
          );
        } else {
          // otherwise add the fields for each existing value
          foreach ($form_state['input']['names'] as $i => $value) {
            $form['names'][$i] = array('#type' => 'fieldset');
            $form['names'][$i]['name'] = array(
              '#type' => 'textfield',
              '#title' => t('Name'),
              '#default_value' => $form_state['input']['names'][$i]['name'],
            );
            $form['names'][$i]['select'] = array(
              '#type' => 'select',
              '#title' => t('Select'),
              '#default_value' => $form_state['input']['names'][$i]['select'],
              '#options'=>array('1'=>'One', '2'=>'Two', '3'=>'Three'),
            );
          }

          // add the additional field for a new entry
          $last = count($form_state['input']['names']);
          $form['names'][$last] = array('#type' => 'fieldset');
          $form['names'][$last]['name'] = array(
              '#type' => 'textfield',
              '#title' => t('Name'),
          );
          $form['names'][$last]['select'] = array(
              '#type' => 'select',
              '#title' => t('Select'),
              '#options'=>array('1'=>'One', '2'=>'Two', '3'=>'Three'),
          );
        }

        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        );
        $form['#submit'][] = 'boucado_test_form_add_more_submit';

        return $form;
    }

    function boucado_test_form_ajax_simplest_callback($form, &$form_state) {
        return $form['names'];
    }

    function boucado_test_form_add_more_submit($form, &$form_state) {
        print_r($form_state['values']);
        exit();
    }
	
function boucado_downline($uid) {
global $user;

	if($uid!='') {
		$userdata = boucado_get_userdata($uid);
	} else {
		$uid = $user->name;
		$userdata = boucado_get_userdata($uid);
	}	
	
	$statistik = array();
	$output = "";
	
	$tree = boucado_downline_tree($statistik, $userdata->member_id, $userdata->member_id,1);
	
	$levels = array('1' => 0, '2' => 0, '3' => 0, '4' => 0, '5' => 0, '6' => 0, '7' => 0, '8' => 0, '9' => 0);
	$gesamt = 0;
	
	foreach ($statistik as $level) {
		$levels[$level['level']] = $levels[$level['level']] + $level['count'];  
		$gesamt += $level['count']; 
	}
	
	for ($i = 1; $i < 10; $i++) {
		$output .= "Level " . $i . ": " . $levels[$i] . "<br>";
	}
	$output .= "<p><b>Gesamt: " . $gesamt . "</b></p>";
	$output .= "<br><hr><br>";
	
	$output .= $tree;
	
	return $output;
}


function boucado_downline_tree(&$statistik, $uid, $sponsor_id, $level=1) {
	if ($level>9) {return;} // Abbruch nach 9 Leveln
	
	db_set_active('boucado_matrix');
	$sql = "SELECT m.member_id, n.bonuslevel, n.username, n.first_name, n.last_name, n.sponsor_id FROM {test_matrix} m JOIN {test_members} n ON m.member_id = n.member_id WHERE m.host_id=" . $uid . " ORDER by m.member_id";
	$result = db_query($sql);
	db_set_active();
	$output = "";
	$eigen = "";
	if ($result->rowCount()) {
		$count = $result->rowCount();
		$statistik[] = array('level' => $level, 'count' => $count);
		foreach ($result as $row) {
			if ($sponsor_id == $row->sponsor_id) {$eigen = " eigen"; }
  			$output .= $level . '<span class="level' . $level . ' stufe' . $row->bonuslevel . $eigen . '" style="padding-left:' . $level*20 . 'px;">' . $row->username . ' (id: ' . $row->member_id .  ') ' . $row->first_name . '</span><br>' . boucado_downline_tree($statistik, $row->member_id, $sponsor_id, $level+1);
  		}
 		db_set_active();
		return $output;
	} else {
		db_set_active();
		return "";
	}
}
 

function boucado_resettests() {
	db_set_active('boucado_matrix');	
	$result = db_query("DELETE FROM {test_members} WHERE member_id > 1");
	$result = db_query("DELETE FROM {test_matrix} WHERE member_id > 1");	
	db_set_active();
	$statistik = array();
	$output = boucado_downline_tree($statistik,1,1,1);
	return "<p>Testdaten gelöscht.</p>" . $output;
}

function new_TestMember($sponsor_id) {
	db_set_active('boucado_matrix');
	$result = db_query("SELECT Vorname FROM {namen} ORDER BY rand() LIMIT 1;");
	$vorname = $result->fetchCol();
	$result = db_query("SELECT Nachname FROM {namen} ORDER BY rand() LIMIT 1;");
	$nachname = $result->fetchCol();
	$username = substr(strtolower($vorname[0]), 0 , 3) . substr(strtolower($nachname[0]), 0 , 3) . rand(0,99);
	$username = $sponsor_id . "_" . rand(0,9999);
	
	// Insert in table
	try {
		$member_id = db_insert('test_members')
			->fields(array('sponsor_id','bonuslevel','username','first_name','last_name'))
			->values(array(
				'sponsor_id' => $sponsor_id,
				'bonuslevel' => 2,
				'username' => $username,
				'first_name' => $vorname[0],
				'last_name' => $nachname[0],
				'sponsored' => REQUEST_TIME))
			->execute();
		db_set_active();
		return $member_id;
	} catch (PDOException $e) { // username schon vergeben?
		dpm($e->getMessage());
		db_set_active();
		return 0;
	}
}

 function boucado_TestInsert($sponsor_id, $anz){
	for ($i=1; $i <= $anz; $i++) { 	
		if ($sponsor_id == -1) { // Sponsor aus DB holen, sonst den angegebenen $sponsor verwenden
			db_set_active('boucado_matrix');
			$result = db_query("SELECT member_id FROM {test_members} ORDER BY rand() LIMIT 1;");
			$sponsor = $result->fetchCol();
			$next_id = $sponsor[0];
			db_set_active();
		} else {
			$next_id = $sponsor_id;
		}
		$member_id = new_TestMember($next_id);
		boucado_inMatrix($member_id, $next_id);
	}
	$statistik = array();
	$output = boucado_downline_tree($statistik,1,1,1);
	
	return $output;
}

function boucado_inMatrix($member_id, $sponsor_id) {

	$nextone = array();
	$nextLevelIds = getNextLevelIds($nextone, $sponsor_id);
	usort($nextone, 'compareIds'); // zuerst von links nach rechts sortieren
	usort($nextone, 'compareCount');  // dann nach dem wenigsten downlines
	$host_id = $nextone[0]['uid'];
	
	db_set_active('boucado_matrix');
	$matrix_id = db_insert('test_matrix')
	->fields(array('member_id','host_id'))
	->values(array('member_id' => $member_id, 'host_id' => $host_id))
	->execute();
	
	db_update('test_members')
	->fields(array('last_hosted' => date("Y-m-d H:i:s", time())))
	->condition('member_id',$host_id,'=')
	->execute();
	
	db_set_active();	
	
	update_upline($member_id);

}

function getFirstLevelCount($id) {
	db_set_active('boucado_matrix');
	$result = db_query("SELECT count(*) FROM {test_matrix} WHERE host_id = '" . $id . "'")->fetchCol();
	db_set_active();
	return $result[0];
}

function getSecondLevelCount($id){
	db_set_active('boucado_matrix');
	
	// mal alle direkten downlines holen:
	$result = db_query("SELECT member_id FROM {test_matrix} WHERE host_id = '" . $id . "' order by member_id");

	if ($result->rowCount()) {
		$ids_anz = array();
		$anzahlen = array();
		$host_ids = '';
		$i = 0;
		$max_anz = 0;
		$min_anz = 0;
		foreach ($result as $row) {
			// wie viele downlines haben die in der ersten Reihen schon?
			$result1 = db_query("SELECT host_id, count(*) as anz FROM {test_matrix} WHERE host_id = '" . $row->member_id . "' group by host_id order by count(*), host_id");
			if ($result1->rowCount()) { // wenn überhaupt, dann
				$anz = $result1->fetchCol(1);
				$host_id = $result1->fetchCol(0);
				$ids_anz[] = array('host_id' => $row->member_id, 'anz' => $anz[0]);
				$anzahlen[] = $anz[0];
				$host_ids .= $row->member_id . ',';
				$i++;
			} else {
				$anzahlen[] = 0;
				$ids_anz[] = array('host_id' => $row->member_id, 'anz' => 0);
			}
		}
		if ($i > 0) {
			$max_anz = max($anzahlen);
			$min_anz = min($anzahlen);
			$host_ids = substr($host_ids,0,strlen($host_ids)-1);
			usort($ids_anz, 'compareHostIds'); // host_ids aufsteigend sortieren		
			usort($ids_anz, 'compareHosts'); // nach Anzahl an downlines sortieren, absteigend
		}
	} else {
		$ids_anz = NULL;
		$min_anz = 0;
		$max_anz = 0;
	}
	
	db_set_active();
	return array('ids_anz' => $ids_anz, 'host_ids' => $host_ids, 'max_anz' => $max_anz, 'min_anz' => $min_anz);
}

function getNextLevelIds(&$nextone, $sponsor_id) {
	
	$first_level_count = getFirstLevelCount($sponsor_id);
	
	if ($first_level_count < 3) { // erste Reihe ist noch nicht voll
		$nextone[] = array('uid' => $sponsor_id);
	} else {
	
		$second_level_counts = getSecondLevelCount($sponsor_id);
		if ($second_level_counts['min_anz'] < 3) { // zweite Reihe ist noch nicht voll
			$nextone[] = array('uid' => $second_level_counts['ids_anz'][0]['host_id']); // den, mit den wenigsten zurück geben
		} else { // zweite Reihe ist voll, wer ist der Nächste? Wer hat noch nicht, wer will nochmal?
			db_set_active('boucado_matrix');	
			// wer sind die 3 Kandidaten?
			$result = db_query("SELECT member_id FROM {test_members} WHERE member_id IN (" . $second_level_counts['host_ids'] . ") order by last_hosted asc, member_id");
			$geschafft = 0;
			foreach ($result as $row) {
				$next_id = $result->fetchCol();
				$first_level_count = getFirstLevelCount($next_id[0]);
				if ($first_level_count < 3) {
					$nextone[] = array('uid' => $next_id['0']);
					$geschafft = 1;
					db_set_active();
					return;
				}
			}
			if (!$geschafft) {
				db_set_active('boucado_matrix');
				$result = db_query("SELECT member_id FROM {test_members} WHERE member_id IN (" . $second_level_counts['host_ids'] . ") ORDER by rand() LIMIT 1");
				$next_id = $result->fetchCol();
				db_set_active();
				getNextLevelIds($nextone, $next_id[0]);				
			}
			
	 	}
	}
}

// Upline rekursiv bis zur 9. Ebene aktualisieren
function update_upline($member_id, $level = 1) {
	if (($member_id == "0") || ($level > 9)) {
		return; 
	} else {
		db_set_active('boucado_matrix');
		$result = db_query("SELECT host_id FROM {test_matrix} WHERE member_id = " . $member_id);
		$host = $result->fetchCol();
		$host_id = $host[0];		
		db_update('test_members')
		->fields(array('last_downline' => date("Y-m-d H:i:s", time())))
		->condition('member_id',$host_id,'=')
		->execute();
		db_set_active();
		update_upline($host_id, $level++);		
	}
}

function compareCount($a, $b)
{
  return $a['count'] - $b['count'];
}

function compareIds($a, $b)
{
  return $b['end'] - $a['end'];
}

function compareHosts($a, $b)
{
  return $a['anz'] - $b['anz'];
}

function compareHostIds($a, $b)
{
  return $b['host_id'] - $a['host_id'];
}

function print_pre($p,$titel="") {
	print $titel . ": "; 
	print "<pre>";
	print_r($p);
	print "</pre>";
}

function boucado_payment_success($processor){
	// print_r($_GET);
	// Array ( [tx] => 3PS37413TX528213Y [st] => Completed [amt] => 15.00 [cc] => EUR [cm] => [item_number] => admin [q] => payment/success/PayPal ) 
	// http://boucado.space/payment/success/PayPal?tx=5X6538147B004380C&st=Completed&amt=15.00&cc=EUR&cm=&item_number=admin
	// Danke für Ihre Zahlung. Ihre Transaktion wurde abgeschlossen und Sie erhalten per E-Mail eine Bestätigung für Ihren Kauf. Sie können sich unter <a href='http://www.paypal.com' target='_blank'>www.paypal.com</a> in Ihr Konto einloggen, um die Transaktionsdetails anzuzeigen.
	switch (strtolower($processor)) {
		case 'paypal':
			$danke = t("Your payment with PayPal was successful. The transaction was completed and you will receive an email with the confirmation about your payment. You can login at <a href='http://www.paypal.com' target='_blank'>www.paypal.com</a> and control the transaction details.");
			$danke .= "<br>";
			$danke .= "<p><b>PayPal Transaction ID: " . $_GET['tx'] . "</b></p>";
			break;
		
		default:
			
			break;
	}
	
	db_set_active('boucado_matrix');

	// Insert in table
	try {
		$payment_id = db_insert('test_payments')
			->fields(array('username','transaction','status','amount','currency','bonuslevel'))
			->values(array(
				'username' => $_GET['item_number'],
				'transaction' => $_GET['tx'],
				'status' => $_GET['st'],
				'amount' => $_GET['amt'],
				'currency' => $_GET['cc'],
				'bonuslevel' => 2))
			->execute();
		db_set_active();
		boucado_pay_uplines($payment_id, $_GET['item_number'], $_GET['amt'],2);
		return $danke;
	} catch (PDOException $e) {
		dpm($e->getMessage());
		db_set_active();
		return "Fehler beim Speichern.";
	}
}

function boucado_payment_cancel(){
	$cancel = t("<h2>You canceled the payment.</h2>");
	return $cancel;
}

function boucado_pay_uplines($payment_id, $username, $amount, $bonuslevel) {
	$payer = boucado_get_userdata($username);
	// if ($bonuslevel != $payer['bonuslevel']) {}

	pay_upline($payer->member_id, $payment_id, 1); 
}

// Upline rekursiv bis zur 9. Ebene aktualisieren
function pay_upline($member_id, $payment_id, $level = 1) {
	if (($member_id == "0") || ($level > 9)) {
		return; 
	} else {
		db_set_active('boucado_matrix');
		$result = db_query("SELECT host_id, bonuslevel FROM test_matrix m, test_members n WHERE m.member_id = n.member_id AND n.member_id = " . $member_id);
		$row = $result->fetchAssoc();
		dpm($row);
		$host_id = $row['host_id'];	
		$bonuslevel = $row['bonuslevel'];
		db_set_active();
		$upline = boucado_get_userdata($host_id);
		//dpm($upline);
//		db_set_active('boucado_matrix');
//		$sql = "SELECT fee_member FROM fees WHERE from_order_index=" . $bonuslevel . " AND to_order_index=" . $upline->bonuslevel;
//		dpm($sql);
/*		$fees = db_query($sql);
		$fee = $fees->fetchCol();
		$thefee = $fee[0];
/*		// Insert in table
		try {		
			db_insert('test_wallet')
			->fields(array('amount','from_id','to_id','type_cash','descr','payment_id'))
			->values(array(
			'amount' => $thefee,
			'from_id' => $member_id,
			'to_id' => $upline['member_id'],
			'type_cash' => 'Bonus',
			'descr' => 'monthly Payment from Downline',
			'payment_id' => $payment_id
			))
			->execute();
			db_set_active();
			pay_upline($host_id, $payment_id, $level++);
		} catch (PDOException $e) {
			dpm($e->getMessage());
			db_set_active();
		}		

 		db_set_active();
 		pay_upline($host_id, $payment_id, $level++);
  
 */	}
}