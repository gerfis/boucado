<?php

require_once('user-forms.inc');

// $Id$
global $base_url;
global $user;

/*
Query Debug:
print_r($query->__toString());
print_r($query->arguments());
*/
 
/*
 * 
// Username und Vorname an Javascript übergeben:

	$uid = $user->uid;

	$userdata = boucado_get_userdata($uid);
	$boucado_settings = array('username' => $userdata->user);	
	drupal_add_js(array('boucado' => $boucado_settings), 'setting');	
*/


function boucado_init() {
	
    drupal_add_css(drupal_get_path('module', 'boucado') . '/boucado.css');
}


function fdate($datetimestring = '1970-01-01 00:00:00', $format = 'U') {
  // Create a datetime object, return it formatted
  // If you want to give credit for this somewhere, thanks.
  // You really don't have to though; this is kinda obvious
  $dt = new DateTime($datetimestring);
  return $dt->format($format);
} 

function boucado_permission() {
  return array(
    'access own boucado' => array(
      'title' => t('Access own BOUCADO'),
    ),
    'access all boucado' => array(
      'title' => t('Access all BOUCADOs'),
    ),
  );
}


function boucado_menu() {
    $items = array();
	
/*
  $items['admin/boucado'] = array(
    'title' => 'BOUCADO',
    'description' => 'This is the parent item',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  // Need at least one child item before your section will appear.
  $items['admin/boucado/sync'] = array(
    'title' => 'User Synchronization',
    'description' => 'Drupal <-> RUNMLM synchronize',
    'page callback' => 'boucado_sync_users',
    'access arguments' => array('administer site configuration'),
  );

 */
  
  $items['boucado/downline/%'] = array(
    'title' => 'My Downline',
    'description' => 'My BOUCADO downline',
    'page callback' => 'boucado_mydownline',
    'page arguments' => array(2),
    'access arguments' => array('access all boucado'),
  );
  
  $items['boucado/downline'] = array(
    'title' => 'My Downline',
    'description' => 'My BOUCADO downline',
    'page callback' => 'boucado_mydownline',
    'page arguments' => array(2),    
    'access arguments' => array('access own boucado'),
  );
      	
  $items['boucado/matrix/%'] = array(
    'title' => 'My 3x9 Matris',
    'description' => 'My BOUCADO matrix',
    'page callback' => 'boucado_mymatrix',
    'page arguments' => array(2),
    'access arguments' => array('access all boucado'),
  );
  
  $items['boucado/matrix'] = array(
    'title' => 'My 3x9 Matrix',
    'description' => 'My BOUCADO matrix',
    'page callback' => 'boucado_mymatrix',
    'page arguments' => array(2),    
    'access arguments' => array('access own boucado'),
  );
  		
  $items['boucado/position/%/%'] = array(
    'title' => 'New Position',
    'description' => 'Next free position',
    'page callback' => 'boucado_TestInsert',
    'page arguments' => array(2,3),
    'access arguments' => array('administer site configuration'),
  );


    $items['boucado/resettests'] = array(
        'title' => 'Testdaten gelöscht',
        'page callback' => 'boucado_resettests',
        'access arguments' => array('administer site configuration'),
        'type' => MENU_CALLBACK,
    );
	  	
    $items['join/%'] = array(
        'title' => 'Register',
        'page callback' => 'boucado_register',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
	
    $items['join'] = array(
        'title' => 'join',
        'page callback' => 'boucado_join',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );	

  $items['payment/success/%'] = array(
    'title' => t('Successful BOUCADO payment!'),
    'description' => t('Successful BOUCADO payment!'),
    'page callback' => 'boucado_payment_success',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  
  $items['payment/cancel'] = array(
    'title' => t('BOUCADO payment canceled'),
    'description' => t('BOUCADO payment canceled'),
    'page callback' => 'boucado_payment_cancel',
    'access arguments' => array('access content'),
  );
  
  $items['payment/withdraw'] = array(
    'title' => t('BOUCADO withdraw'),
      'page callback' => 'boucado_payment_withdraw',
      'page arguments' => array(0),
      'access arguments' => array('access own boucado'),
  );  
  
  $items['payment/manually'] = array(
    'title' => t('BOUCADO manually payment'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('boucado_payment_manually_form'),
      'access callback' => TRUE,
      'access arguments' => array('access all boucado'),
      'type' => MENU_CALLBACK,      
  );  
  
  $items['payment/payall'] = array(
    'title' => t('BOUCADO pay all'),
    'description' => t('BOUCADO pay all'),
    'page callback' => 'boucado_test_pay_all',
    'access arguments' => array('administer site configuration'),
  );
 
   $items['payment/payall/clear'] = array(
    'title' => t('BOUCADO Clear Payments'),
    'description' => t('BOUCADO Clear Payments'),
    'page callback' => 'boucado_test_pay_all_clear',
    'access arguments' => array('administer site configuration'),
  );
  
  $items['payment/payments'] = array(
    'title' => t('My Payments'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('boucado_payment_pay_form'),
      'access callback' => TRUE,
      'access arguments' => array('access own boucado'),
      'type' => MENU_CALLBACK,      
  );  
  
     // path with autocomplete function for cities
  $items['username/autocomplete'] = array(
      'title' => 'Autocomplete for usernames',
      'page callback' => '_usernames_autocomplete',
      'access arguments' => array('access all boucado'),  //or whatever permission makes sense
      'type' => MENU_CALLBACK
    );
	
    $items['boucado/testform'] = array(
        'title' => t('BOUCADO Testform'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('boucado_test_form_form'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
	
    $items['boucado/wallet'] = array(
        'title' => t('My Wallet'),  
        'page arguments' => array(2),          
        'page callback' => 'boucado_show_wallet',
        'access arguments' => array('access own boucado'),
        'type' => MENU_CALLBACK,
    );
	
    $items['boucado/wallet/%'] = array(
        'title' => t('My Wallet'),
        'page arguments' => array(2),  
        'page callback' => 'boucado_show_wallet',
        'access arguments' => array('access all boucado'),
        'type' => MENU_CALLBACK,
    );
		
  $items['boucado/mypayments/%'] = array(
    'title' => 'My Payments',
    'description' => 'My BOUCADO payments',
    'page callback' => 'boucado_payments_mypayments',
    'page arguments' => array(2),
    'access arguments' => array('access all boucado'),
  );
  
  $items['boucado/mypayments'] = array(
    'title' => 'My Payments',
    'page arguments' => array(2),      
    'description' => 'My BOUCADO Payments',
    'page callback' => 'boucado_payments_mypayments', 
    'access arguments' => array('access own boucado'),
  );
			
  		
	return $items;
}


function boucado_block_info() {
  $blocks = array();

  $blocks['BOUCADO Member'] = array(
    'info' => t('BOUCADO Member'),
  );

  return $blocks;
}

/**
* Implements hook_block_view().
*/
function boucado_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'BOUCADO Member':
      $block['subject'] = '';
      $block['content'] = _BOUCADO_member_block_content();
      break;
  }

  return $block;
}

function _BOUCADO_member_block_content() {
global $user;
global $theme;

	$user_item = user_load($user->uid); 
	$member = boucado_get_userdata($user->name);
	$output = t('Hello ') . $member->first_name . "!<br>";

	db_set_active('boucado_matrix');
	$sql = "SELECT SUM(amount) as total FROM wallet WHERE to_name='" . $user->name ."'";
	$result = db_query($sql)->fetchCol();
	$total = $result[0];
	if ($total=="") {$total="0.00";}

	$sql = "SELECT title FROM bonuslevels WHERE bid='" . $member->bonuslevel ."'";
	$result = db_query($sql)->fetchCol();
	$level = $result[0];

	db_set_active();

	if($user_item->uid && isset($user_item->picture, $user_item->picture->uri)){
		$output .= l(theme_image_style(array('path' => $user_item->picture->uri, 'width'=>'160px','height'=>'160px','style_name' => 'avatar')), '/user', array('html' => TRUE));
	} else {
		 $output .= l('<img width="160" src=" ' . base_path() . drupal_get_path('theme', $theme) . '/user-avatar.png" />', '/user', array('html' => TRUE)) ;
    }
	$output .= "<br>" . t("Your status is: ") . "<span style='padding:0.5em;border:1px solid #999;background-color:" . $member->status . ";'>" . t($member->status) . "</span>";
	$output .= "<br><br>" . t("Your level is: ") . $level;
	$output .= "<br>" . t("Your balance is: ") . "€" . $total;
	
	if ($member->status == "red" || $level == "FREE") { 
		$output .= "<br>" . l(t("Pay your fee Now!"),'/boucado/mypayments', array('html' => TRUE)) ;
	}
	return $output;
}


function boucado_join() {
	$_SESSION['sponsor_uid'] = "";
	$_SESSION['sponsor_name'] = "";
	boucado_register(1);
	drupal_goto('user/register');
}

function boucado_register($uid) {
	if (boucado_check_sponsor($uid)) {
		if (arg(2) == "") {
			drupal_goto('<front>');
		} else if (arg(2) == "register") {
			drupal_goto('user/register');
		} else {
			drupal_goto(arg(2));
		}			
	} else {
		return '<br>' . t('User "@uid" unknown.', array('@uid' => $uid));
	} 
}

function boucado_check_sponsor($uid) {
	$result = db_query("SELECT uid, name FROM {users} WHERE uid='" . $uid . "'");
	$user = $result->fetchAssoc();
	if ($user['uid']) {
		$_SESSION['sponsor_uid'] = $user['uid'];
		$_SESSION['sponsor_name'] = $user['name'];
		setcookie('sponsor_name', $user['name'], time() + 3600 * 24 * 180, '/');
		//print_r($_COOKIE['sponsor']);		
		return true;
	} else {
		$result = db_query("SELECT uid, name FROM {users} WHERE name='" . $uid . "'");
		$user = $result->fetchAssoc();
		if ($user['name']) {
			$_SESSION['sponsor_uid'] = $user['uid'];
			$_SESSION['sponsor_name'] = $user['name'];
			setcookie('sponsor_name', $user['name'], time() + 3600 * 24 * 180, '/');		
			return true;
		} else {
			$_SESSION['sponsor_uid'] = '';
			$_SESSION['sponsor_name'] = '';
			return false;
		}
	}
}

function boucado_user_presave(&$edit, $account, $category) {
	// Benutzer bei der Aktivierung in die Matrix platzieren:
	
  if ($account->uid) { // user is not new
	  if ($account->status === "0" && isset($edit['status']) && $edit['status']==1) { // user is being activated

    // Benutzer Rolle setzen
	if ($role = user_role_load_by_name('FREE')) {
        user_multiple_role_edit(array($member->member_id), 'add_role', $role->rid);
		drupal_set_message("Dem Benutzer wurde der Status 'FREE' zugeteilt.");
      }    
/*    
 	// Member in Matrix platzieren:
    $member = boucado_get_userdata($account->name);
	boucado_inMatrix($member->member_id, $member->sponsor_id);
	drupal_set_message("Der Benutzer wurde in der Matrix platziert.");
	// passiert jetzt erst beim Bezahlen
*/
  	}
  }
}

function boucado_get_username($member_id) {
// Member holen
	db_set_active('boucado_matrix');
	$query = db_select('boucado_members', 'm');
	$query
		->fields('m')
  		->condition('m.member_id', $member_id, '=')
  		->range(0, 1);
	$result = $query->execute();
	db_set_active();
	
	foreach ($result as $record) {
  		$thisuser = $record;
	}	
	return $thisuser->username;
}

function boucado_get_userdata($username) {
global $user;
	
	if ($username=="") {$username = $user->name;}
	  // For convenience, we'll allow user ids as well as full user objects.
	if (is_numeric($username)) {
		$member = user_load($username);
		$username = $member->name; 
	}

	if ($username=="Demo") {

		$thisuser = new stdClass();
		$thisuser->member_id=0;
		$thisuser->username="demo";
		$thisuser->first_name="Demo";
		$thisuser->last_name="Demo";
		$thisuser->street="Demostreet";
		$thisuser->postal="10000";
		$thisuser->city="Democity";
		$thisuser->country="Democountry";
		$thisuser->phone="123456";
		$thisuser->email="demo@demo.com";
		$thisuser->sponsor = 'admin';
		$thisuser->sponsor_id = '1';
		$thisuser->sponsor_first_name = 'BOUCADO';
		$thisuser->sponsor_last_name = 'Admin';
		$thisuser->upline = 'admin';
		$thisuser->upline_id = '1';
		$thisuser->upline_first_name = 'BOUCADO';
		$thisuser->upline_last_name = 'Admin';	
		$thisuser->bonuslevel = 1;	
		// Ablaufdaten holen
		$thisuser->status = boucado_is_user_active($thisuser);
		
		return $thisuser;
	}

// Member holen
	db_set_active('boucado_matrix');
	$query = db_select('boucado_members', 'm');
	$query
		->fields('m')
  		->condition('m.username', $username, '=')
  		->range(0, 1);
	$result = $query->execute();
	db_set_active();
	
	foreach ($result as $record) {
  		$thisuser = $record;
	}

 // Sponsor holen:
 	if (isset($thisuser) && ($thisuser->member_id > 1)) {
 	db_set_active('boucado_matrix');
 	$query = db_select('boucado_members', 'm');
	$query
		->fields('m')
  		->condition('m.member_id', $thisuser->sponsor_id, '=')
  		->range(0, 1);
	$result = $query->execute();

	db_set_active();
		
	foreach ($result as $record) {
  		$sponsor = $record;
	}

	$thisuser->sponsor = $sponsor->username;
	$thisuser->sponsor_id = $sponsor->member_id;
	$thisuser->sponsor_first_name = $sponsor->first_name;
	$thisuser->sponsor_last_name = $sponsor->last_name;
	$thisuser->sponsor_bonuslevel = $sponsor->bonuslevel;
	
	} else { // der Admin
		$thisuser->sponsor = 'admin';
		$thisuser->sponsor_id = '1';
		$thisuser->sponsor_first_name = 'BOUCADO';
		$thisuser->sponsor_last_name = 'Admin';
		$thisuser->sponsor_bonuslevel = 5;
	}

 // Upline holen
 
  	if ($thisuser->member_id > 1) { // nicht der Admin
	 	db_set_active('boucado_matrix');
	 	$query = db_select('boucado_members', 'm');
		$query
			->fields('m')
	  		->condition('m.member_id', $thisuser->member_id, '=')
			->condition('m.host_id','0','>')
	  		->range(0, 1);
		$result = $query->execute();

		if ($result->rowCount()) {	
			foreach ($result as $record) {
		  		$upline_id = $record;
			}
		
		 	$query = db_select('boucado_members', 'm');
			$query
				->fields('m')
		  		->condition('m.member_id', $upline_id->host_id, '=')
		  		->range(0, 1);
			$result = $query->execute();
		
			foreach ($result as $record) {
		  		$upline = $record;
			}
			
			$thisuser->upline = $upline->username;
			$thisuser->upline_id = $upline->member_id;
			$thisuser->upline_first_name = $upline->first_name;
			$thisuser->upline_last_name = $upline->last_name;
			$thisuser->upline_bonuslevel = $upline->bonuslevel;
		} else { // noch nicht platzert
			$thisuser->upline = '';
			$thisuser->upline_id = -1;
			$thisuser->upline_first_name = '';
			$thisuser->upline_last_name = '';
			$thisuser->upline_bonuslevel = 0;			
		}
		db_set_active();	
	} else { // der Admin
		$thisuser->upline = 'admin';
		$thisuser->upline_id = '1';
		$thisuser->upline_first_name = 'BOUCADO';
		$thisuser->upline_last_name = 'Admin';
		$thisuser->upline_bonuslevel = 5;
	}

	// Ablaufdaten holen
	$thisuser->status = boucado_is_user_active($thisuser);
	
	return $thisuser;
}


function boucado_is_user_active(&$thisuser) {
	
	
	db_set_active('boucado_matrix');

	$sql = "SELECT DATE(date_time) from payments where member_id = " . $thisuser->member_id . " ORDER BY date_time DESC LIMIT 1";
	$payments = db_query($sql)->fetchCol();
		

	if (!$payments) {
		$thisuser->last_payment = "No payment made";
		$thisuser->expiration_date = "No payment made";
		$thisuser->tolerance_date = "No payment made";
		$thisuser->tolerance_over_date = "No payment made";			
		db_set_active();
		return "red";
	}
	$last_payment = $payments[0];
	
	$sql = "SELECT the_key, the_val FROM boucado_settings WHERE the_key IN ('PayInterval','PayTolerance','PayToleranceOver')";
	$tolerance = db_query($sql)->fetchAllKeyed();
	$payment_interval = $tolerance['PayInterval'];
	$tolerance_days = $tolerance['PayTolerance'];;
	$tolerance_over_days = $tolerance['PayToleranceOver'];

	db_set_active();

	$last_payment_date= new DateTime($last_payment);
	$last_payment_date_string = $last_payment_date->format('d.m.Y');
	
	$last_payment_date->add(new DateInterval("P" . $payment_interval . "D"));
	$expiration_date_string = $last_payment_date->format('d.m.Y');
	
	$last_payment_date->add(new DateInterval("P" . $tolerance_days . "D"));
	$tolerance_date_string = $last_payment_date->format('d.m.Y');	
		
	$last_payment_date->add(new DateInterval("P" . $tolerance_over_days . "D"));
	$tolerance_over_date_string = $last_payment_date->format('d.m.Y');
			
	$today = new DateTime(date(''));
	
	$expiration_date = new DateTime($expiration_date_string);
	$expiration_date_diff = $today->diff($expiration_date);
	
	$is_expired = (int)$expiration_date_diff->format("%r%a");
	
	$tolerance_date = new DateTime($tolerance_date_string);
	$tolerance_date_diff = $today->diff($tolerance_date);
	
	$is_in_tolerance = (int)$tolerance_date_diff->format("%r%a");
	
	$tolerance_over_date = new DateTime($tolerance_over_date_string);
	$tolerance_over_date_diff = $today->diff($tolerance_over_date);
	
	$is_outof_tolerance = (int)$tolerance_over_date_diff->format("%r%a");

	$thisuser->last_payment = $last_payment_date_string;
	$thisuser->expiration_date = $expiration_date_string;
	$thisuser->tolerance_date = $tolerance_date_string;
	$thisuser->tolerance_over_date = $tolerance_over_date_string;
	
	if ($is_outof_tolerance <0) {
		$thisuser->status = "red";
		return "red";
	} else 
		if (($is_outof_tolerance >= 0) && ($is_in_tolerance <= 0)) {
			$thisuser->status = "yellow";
			return "yellow";
		} else 
			if (($is_in_tolerance >= 0) && ($is_expired <= 0)) {
				$thisuser->status = "green";
				return "green";
			} else {
				$thisuser->status = "white";
				return "white";
			}
}


function boucado_user_delete($account) {
	// Benutzer aus boucado matrix löschen
	db_set_active('boucado_matrix');

	$num_deleted = db_delete('boucado_members')
		->condition('member_id', $account->uid)
		->execute();

	db_set_active();	
	
	drupal_set_message("Der Benutzer wurde aus der BOUCADO Matrix gelöscht.");

}


function boucado_mail($key, &$message, $params) {
  switch ($key) {
    case 'upline':
      // note: data can be passed to this function in the $params array
      $message['subject'] = "Deine BOUCADO Downline wächst!";
      $body = "Hallo " . $params['Uplinename'] . "!\n\nGratuliere, du hast ein neues Mitglied in deiner Downline bekommen:\n\n";
	  $body .= "Sponsor: ". $params['Sponsorname']. "\n\n";
	  $body .= "Username: ". $params['Neueruser']. "\n\n";
	  $body .= "\n\nDenk daran, jedes neue Mitglied kann für einen Wachstumsschub in Deiner gesamten Downline verantwortlich sein.\nAlso informiere so viele Menschen wie möglich über unseren Verein, um Deinen Nebenverdienst zu erhöhen.";
      $body .= "\n\nDein BOUCADO Team.";
      $message['body'] = $body;
      break;	  
   case 'neuer':
      $message['subject'] = "Neue Anmeldung bei BOUCADO: " . $params['Neueruser'];
      $body = "Sponsor: " . $params['Sponsorname']. "\n\n";
	  $body .= "Username: ". $params['Neueruser']. "\n\n";
      $message['body'] = $body;
      break;	    
  }    
}



function boucado_sendmail() {

	$uid = $user->uid;
	$userdata = boucado_get_userdata($uid);
			
	// E-Mail senden:
	
	$params = array(
  		'Vorname' => $userdata['strVName_O'],
  		'Polizze' => $polizze
	);
	
	$to = $userdata['strEmail_O'] . ',office@boucado.space';
	
	$sent = drupal_mail('boucado', 'kuendigen', $to , language_default(), $params, 'office@boucado.space');
	
	if($sent){
		drupal_set_message('Ein E-Mail wurde zu Ihnen gesendet.', 'status');	
	} else {
		drupal_set_message('E-Mail konnte nicht gesendet werden.', 'error');
	}
	
}

function boucado_mynetworks($net_id, $membername) {

	$refdata = array();
/*	
	// Sponsor Links:
	$sponsorquery = db_select('network_members', 'm');
	$sponsorquery
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member->sponsor_id,'=');
	$sponsorresult = $sponsorquery->execute();		

	foreach ($sponsorresult as $sponsorrecord) {
		$refdata['sponsor']['first_name'] = $member->sponsor_first_name;
		$refdata['sponsor']['last_name'] = $member->sponsor_last_name;
		$refdata['sponsor']['referral'] = $sponsorrecord->referral;
	}
	
	
	// Upline Links:
	$uplinequery = db_select('network_members', 'm');
	$uplinequery
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member->upline_id,'=');
	$uplineresult = $uplinequery->execute();		

	foreach ($uplineresult as $uplinerecord) {
		$refdata['upline']['first_name'] = $member->upline_first_name;
		$refdata['upline']['last_name'] = $member->upline_last_name;
		$refdata['upline']['referral'] = $uplinerecord->referral;
	}
*/
	get_upline_networks($refdata, $net_id, $membername, 'sponsor', 1);
	get_upline_networks($refdata, $net_id, $membername, 'upline', 1);

	// Eigener Links:
	$member = boucado_get_userdata($membername);
	db_set_active('boucado_matrix');
	$selfquery = db_select('network_members', 'm');
	$selfquery
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member->member_id,'=');
	$selfresult = $selfquery->execute();		

	foreach ($selfresult as $selfrecord) {
		$refdata['self']['referral'] = $selfrecord->referral;
	}
	db_set_active();
	
	$refdata['self']['member_id'] = $member->member_id;
	

	return $refdata;
	
}


function get_upline_networks(&$refdata, $net_id, $membername, $type, $level) {

	$member = boucado_get_userdata($membername);

	if ($type == "sponsor") {

		if (isset($refdata['sponsor']['referral'])) {return; }
		// Sponsor Links:
		db_set_active('boucado_matrix');
		$sponsorquery = db_select('network_members', 'm');
		$sponsorquery
			->fields('m')
			->condition('m.net_id',$net_id,'=')
			->condition('m.member_id',$member->sponsor_id,'=');
		$sponsorresult = $sponsorquery->execute();		
	
		foreach ($sponsorresult as $sponsorrecord) {
			$refdata['sponsor']['first_name'] = $member->sponsor_first_name;
			$refdata['sponsor']['last_name'] = $member->sponsor_last_name;
			$refdata['sponsor']['referral'] = $sponsorrecord->referral;
		}
			
		db_set_active();
		if (!isset($refdata['sponsor']['referral'])) {
			get_upline_networks($refdata, $net_id, $member->sponsor, $type, $level + 1);
		}
		
	} else {

		if (isset($refdata['upline']['referral'])) {return; }		
		
		// Upline Links:
		db_set_active('boucado_matrix');		
		$uplinequery = db_select('network_members', 'm');
		$uplinequery
			->fields('m')
			->condition('m.net_id',$net_id,'=')
			->condition('m.member_id',$member->upline_id,'=');
		$uplineresult = $uplinequery->execute();		
	
		foreach ($uplineresult as $uplinerecord) {
			$refdata['upline']['first_name'] = $member->upline_first_name;
			$refdata['upline']['last_name'] = $member->upline_last_name;
			$refdata['upline']['referral'] = $uplinerecord->referral;
		}	
		db_set_active();
		if (!isset($refdata['upline']['referral'])) {
			get_upline_networks($refdata, $net_id, $member->upline, $type, $level + 1);
		}			
	}
			
}

function boucado_network_form($form, &$form_state, $infos) {
		
	$net_id = $infos['net_id'];
	$member_id = $infos['member_id'];	
	$link = "";
		
	db_set_active('boucado_matrix');
	$query = db_select('network_members', 'm');
	$query
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member_id,'=');
	$result = $query->execute();		

	foreach ($result as $record) {
		$link = $record->referral;
	}
	
	db_set_active();
	
	$form['network']['net_id'] = array(
          '#type' => 'hidden',
          '#default_value' => $net_id,
            );
            
 	$form['network']['member_id'] = array(
          '#type' => 'hidden',
          '#default_value' => $member_id,
            );
				
	$form['network']['referral'] = array(
          '#type' => 'textfield',
          '#title' => t('Your referral code:'),
          '#default_value' => $link,
            );
            
    $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        );
        $form['#submit'][] = 'boucado_network_form_submit';

        return $form;
}

function boucado_network_form_submit($form, &$form_state) {
	$net_id = $form_state['values']['net_id'];
	$member_id = $form_state['values']['member_id'];
	$referral = $form_state['values']['referral'];
	
	db_set_active('boucado_matrix');
	$query = db_select('network_members', 'm');
	$query
		->fields('m')
		->condition('m.net_id',$net_id,'=')
		->condition('m.member_id',$member_id,'=');
	$result = $query->execute();		

	if ($result->rowCount() > 0) {
		db_update('network_members')
			->fields(array('referral' => $referral,))
  			->condition('net_id', $net_id, '=')
			->condition('member_id', $member_id, '=')
  			->execute();
	} else {
		db_insert('network_members')
			->fields(array('net_id' => $net_id,'member_id' => $member_id,'referral' => $referral,))
			->execute();
	}
	db_set_active();
}   
	
function boucado_test_form_form($form, &$form_state, $no_js_use = FALSE) {

        $form['add_more'] = array(
          '#type' => 'button',
          '#value' => t('Add More'),
          '#ajax' => array(
            'callback' => 'boucado_test_form_ajax_simplest_callback',
            'wrapper' => 'replace-this',
            'method' => 'replace',
           ),
        );

        $form['names'] = array(
          '#type' => 'fieldset',
          '#title' => 'Names',
          '#prefix' => '<div id="replace-this">',
          '#suffix' => '</div>',
          '#tree' => TRUE,
        );

        // build the initial field if this is not being rebuilt 
        // from ajax request
        if (!array_key_exists('clicked_button', $form_state)) {
          $form['names'][0] = array('#type' => 'fieldset');
          $form['names'][0]['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Name'),
            '#parent' => 'test',
          );
          $form['names'][0]['select'] = array(
            '#type' => 'select',
            '#title' => t('Select'),
            '#parent' => 'test',
            '#options'=>array('1'=>'One', '2'=>'Two', '3'=>'Three'),
          );
        } else {
          // otherwise add the fields for each existing value
          foreach ($form_state['input']['names'] as $i => $value) {
            $form['names'][$i] = array('#type' => 'fieldset');
            $form['names'][$i]['name'] = array(
              '#type' => 'textfield',
              '#title' => t('Name'),
              '#default_value' => $form_state['input']['names'][$i]['name'],
            );
            $form['names'][$i]['select'] = array(
              '#type' => 'select',
              '#title' => t('Select'),
              '#default_value' => $form_state['input']['names'][$i]['select'],
              '#options'=>array('1'=>'One', '2'=>'Two', '3'=>'Three'),
            );
          }

          // add the additional field for a new entry
          $last = count($form_state['input']['names']);
          $form['names'][$last] = array('#type' => 'fieldset');
          $form['names'][$last]['name'] = array(
              '#type' => 'textfield',
              '#title' => t('Name'),
          );
          $form['names'][$last]['select'] = array(
              '#type' => 'select',
              '#title' => t('Select'),
              '#options'=>array('1'=>'One', '2'=>'Two', '3'=>'Three'),
          );
        }

        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        );
        $form['#submit'][] = 'boucado_test_form_add_more_submit';

        return $form;
    }

    function boucado_test_form_ajax_simplest_callback($form, &$form_state) {
        return $form['names'];
    }

    function boucado_test_form_add_more_submit($form, &$form_state) {
        print_r($form_state['values']);
        exit();
    }
	
function boucado_mydownline($uid) {
global $user;

	if($uid!='') {
		$userdata = boucado_get_userdata($uid);
	} else {
		$uid = $user->name;
		$userdata = boucado_get_userdata($uid);
	}	
	
	$statistik = array();
	$bonuslevels = array('FREE'=>0, 'BRONCE'=>0, 'SILVER'=>0, 'GOLD'=>0,'PLATIN'=>0);
	$output = "";
	
	$tree = boucado_downline_tree($statistik, $bonuslevels, $userdata->member_id, $userdata->member_id,1,false,9);
	
	$levels = array('1' => 0, '2' => 0, '3' => 0, '4' => 0, '5' => 0, '6' => 0, '7' => 0, '8' => 0, '9' => 0);
	$gesamt = 0;
	
	foreach ($statistik as $level) {
		$levels[$level['level']] = $levels[$level['level']] + $level['count'];  
		$gesamt += $level['count']; 
	}
	
	for ($i = 1; $i < 10; $i++) {
		$output .= "Level " . $i . ": " . $levels[$i] . "<br>";
	}
	$output .= "<p><b>" . t("Total") . ": ". $gesamt . "</b></p>";

	$output .= "<h3>Bonuslevels:</h3>";
	$output .= "FREE: " . $bonuslevels['FREE'] . "<br>";	
	$output .= "BRONCE: " . $bonuslevels['BRONCE'] . "<br>";
	$output .= "SILVER: " . $bonuslevels['SILVER'] . "<br>";
	$output .= "GOLD: " . $bonuslevels['GOLD'] . "<br>";
	$output .= "PLATIN: " . $bonuslevels['PLATIN'] . "<br>";
	$output .= "<br><hr><br>";
			
	$output .= $tree;
	
	return $output;
}

function boucado_mymatrix($uid) {
global $user;

	if($uid!='') {
		$userdata = boucado_get_userdata($uid);
	} else {
		$uid = $user->name;
		$userdata = boucado_get_userdata($uid);
	}	
		// Bis zu welcher Tiefe bekommt der Empfänger den Bonus?
	db_set_active('boucado_matrix');
	$sql = "SELECT title, depth FROM boucado_members m, bonuslevels b WHERE m.bonuslevel = b.bid AND m.username='" . $userdata->username . "'";
	$levels = db_query($sql)->fetchAll();
	$title = $levels[0]->title;
	$depth = $levels[0]->depth;
	db_set_active();
	
	$statistik = array();
	$bonuslevels = array('FREE'=>0, 'BRONCE'=>0, 'SILVER'=>0, 'GOLD'=>0,'PLATIN'=>0);
	$output = "<h3>Bonuslevel: " . $title . "</h3>";
	$output .= "<h3>" . t("Paylevels: ") . $depth . "</h3>";
	
	$tree = boucado_downline_tree($statistik, $bonuslevels, $userdata->member_id, $userdata->member_id,1,true,$depth);
	
	$levels = array('1' => 0, '2' => 0, '3' => 0, '4' => 0, '5' => 0, '6' => 0, '7' => 0, '8' => 0, '9' => 0);
	$gesamt = 0;
	
	foreach ($statistik as $level) {
		$levels[$level['level']] = $levels[$level['level']] + $level['count'];  
		$gesamt += $level['count']; 
	}
	
	for ($i = 1; $i < 10; $i++) {
		if ($i > $depth) {
			$output .= "<span style='color:red;'>Level " . $i . ": " . $levels[$i] . "</span><br>";
		} else {
			$output .= "<span>Level " . $i . ": " . $levels[$i] . "</span><br>";
		}
	}
	$output .= "<p><b>" . t("Total") . ": ". $gesamt . "</b></p>";
	
	$output .= "<h3>Bonuslevels:</h3>";
	$output .= "BRONCE: " . $bonuslevels['BRONCE'] . "<br>";
	$output .= "SILVER: " . $bonuslevels['SILVER'] . "<br>";
	$output .= "GOLD: " . $bonuslevels['GOLD'] . "<br>";
	$output .= "PLATIN: " . $bonuslevels['PLATIN'] . "<br>";
	
	$output .= "<br><hr><br>";
		
	$output .= $tree;
	
	return $output;
}

function boucado_downline_tree(&$statistik, &$bonuslevels, $uid, $sponsor_id, $level=1, $matrix=true, $depth) {
	if ($level>9) {return;} // Abbruch nach 9 Leveln
	// if ($sponsor_id==0) {return;} // Abbruch bei inaktiven Usern
	
	db_set_active('boucado_matrix');

	if ($matrix) { // 3x9 Matrix oder richtige Downline anzeigen?
		$sql = "SELECT member_id, bonuslevel, username, first_name, last_name, sponsor_id, host_id FROM {boucado_members} WHERE host_id=" . $uid . " ORDER by member_id";
	} else {
		$sql = "SELECT member_id, bonuslevel, username, first_name, last_name, sponsor_id, host_id FROM {boucado_members} WHERE sponsor_id=" . $uid . " ORDER by member_id";		
	}
	$result = db_query($sql);
	
	db_set_active();
	$output = "";
	$eigen = "";
	$depthclass="";
	if ($level > $depth) {
		$depthclass=" depth";
	}
	if ($result->rowCount()) {
		$count = $result->rowCount();
		$statistik[] = array('level' => $level, 'count' => $count);
		foreach ($result as $row) {
			if ($sponsor_id == $row->sponsor_id) {$eigen = " eigen"; }
			$member_status = boucado_is_user_active($row);
			db_set_active('boucado_matrix');
			$sql = "SELECT title, depth FROM boucado_members m, bonuslevels b WHERE m.bonuslevel = b.bid AND m.member_id='" . $row->member_id . "'";
			$levels = db_query($sql)->fetchAll();
			$bonustitle = $levels[0]->title;
			$bonuslevels[$bonustitle] = $bonuslevels[$bonustitle] + 1; 
			db_set_active();
			$output .= '<span class="status-' . $member_status . '">&nbsp;' .$level . '&nbsp;</span><span class="level' . $level . ' stufe' . $row->bonuslevel . $eigen . $depthclass . ' ' . $bonustitle . '" style="padding-left:' . $level*20 . 'px;">' . $row->username . ' (id: ' . $row->member_id .  ') ' . $row->first_name . ' (' . substr($bonustitle,0,1) . ')</span><br>' . boucado_downline_tree($statistik, $bonuslevels, $row->member_id, $sponsor_id, $level+1,$matrix,$depth);
  		}
 		db_set_active();
		return $output;
	} else {
		db_set_active();
		return "";
	}
}
 

function boucado_resettests() {
	db_set_active('boucado_matrix');	
	$result = db_query("DELETE FROM {boucado_members} WHERE isTest = 1 OR member_id=0");
	db_set_active();
	$statistik = array();
	$bonuslevels = array();
	$output = boucado_downline_tree($statistik,$bonuslevels,1,1,1);
	return "<p>Testdaten gelöscht.</p>" . $output;
}

function new_TestMember($sponsor_id) {
	db_set_active('boucado_matrix');
	$result = db_query("SELECT Vorname FROM {namen} ORDER BY rand() LIMIT 1;");
	$vorname = $result->fetchCol();
	$result = db_query("SELECT Nachname FROM {namen} ORDER BY rand() LIMIT 1;");
	$nachname = $result->fetchCol();
	$username = substr(strtolower($vorname[0]), 0 , 3) . substr(strtolower($nachname[0]), 0 , 3) . rand(0,99);
	$username = $sponsor_id . "_" . rand(0,9999);
	
	// Insert in table
	try {
		$member_id = db_insert('boucado_members')
			->fields(array('sponsor_id','bonuslevel','username','first_name','last_name','is_test'))
			->values(array(
				'sponsor_id' => $sponsor_id,
				'bonuslevel' => 2,
				'username' => $username,
				'first_name' => $vorname[0],
				'last_name' => $nachname[0],
				'sponsored' => REQUEST_TIME,
				'is_test' => 1))
			->execute();
		db_set_active();
		return $member_id;
	} catch (PDOException $e) { // username schon vergeben?
		dpm($e->getMessage());
		db_set_active();
		return 0;
	}
}

 function boucado_TestInsert($sponsor_id, $anz){
	for ($i=1; $i <= $anz; $i++) { 	
		if ($sponsor_id == -1) { // Sponsor aus DB holen, sonst den angegebenen $sponsor verwenden
			db_set_active('boucado_matrix');
			$result = db_query("SELECT member_id FROM {boucado_members} ORDER BY rand() LIMIT 1;");
			$sponsor = $result->fetchCol();
			$next_id = $sponsor[0];
			db_set_active();
		} else {
			$next_id = $sponsor_id;
		}
		$member_id = new_TestMember($next_id);
		boucado_inMatrix($member_id, $next_id);
	}
	$bonuslevels = array();
	$output = boucado_downline_tree($statistik,$bonuslevels,1,1,1);
	
	return $output;
}

function boucado_inMatrix($member_id, $sponsor_id) {

	$nextone = array();
	$nextLevelIds = getNextLevelIds($nextone, $sponsor_id);
	usort($nextone, 'compareIds'); // zuerst von links nach rechts sortieren
	usort($nextone, 'compareCount');  // dann nach dem wenigsten downlines
	$host_id = $nextone[0]['uid'];
	
	db_set_active('boucado_matrix');
	// Dem Member die host_id eintragen
	db_update('boucado_members')
		->fields(array('host_id' => $host_id))
		->condition('member_id', $member_id, '=')
		->execute();

	// Dem Host das Datum eintragen
	db_update('boucado_members')
		->fields(array('last_hosted' => date("Y-m-d H:i:s", time())))
		->condition('member_id',$host_id,'=')
		->execute();
	
	db_set_active();	
	
	update_upline($member_id);

}

function getFirstLevelCount($id) {
	db_set_active('boucado_matrix');
	$result = db_query("SELECT count(*) FROM {boucado_members} WHERE host_id = '" . $id . "'")->fetchCol();
	db_set_active();
	return $result[0];
}

function getSecondLevelCount($id){
	db_set_active('boucado_matrix');
	
	// mal alle direkten downlines holen:
	$result = db_query("SELECT member_id FROM {boucado_members} WHERE host_id = '" . $id . "' order by member_id");

	if ($result->rowCount()) {
		$ids_anz = array();
		$anzahlen = array();
		$host_ids = '';
		$i = 0;
		$max_anz = 0;
		$min_anz = 0;
		foreach ($result as $row) {
			// wie viele downlines haben die in der ersten Reihen schon?
			$result1 = db_query("SELECT host_id, count(*) as anz FROM {boucado_members} WHERE host_id = '" . $row->member_id . "' group by host_id order by count(*), host_id");
			if ($result1->rowCount()) { // wenn überhaupt, dann
				$anz = $result1->fetchCol(1);
				$host_id = $result1->fetchCol(0);
				$ids_anz[] = array('host_id' => $row->member_id, 'anz' => $anz[0]);
				$anzahlen[] = $anz[0];
				$host_ids .= $row->member_id . ',';
				$i++;
			} else {
				$anzahlen[] = 0;
				$ids_anz[] = array('host_id' => $row->member_id, 'anz' => 0);
			}
		}
		if ($i > 0) {
			$max_anz = max($anzahlen);
			$min_anz = min($anzahlen);
			$host_ids = substr($host_ids,0,strlen($host_ids)-1);
			usort($ids_anz, 'compareHostIds'); // host_ids aufsteigend sortieren		
			usort($ids_anz, 'compareHosts'); // nach Anzahl an downlines sortieren, absteigend
		}
	} else {
		$ids_anz = NULL;
		$min_anz = 0;
		$max_anz = 0;
	}
	
	db_set_active();
	return array('ids_anz' => $ids_anz, 'host_ids' => $host_ids, 'max_anz' => $max_anz, 'min_anz' => $min_anz);
}

function getNextLevelIds(&$nextone, $sponsor_id) {
	
	$first_level_count = getFirstLevelCount($sponsor_id);
	
	if ($first_level_count < 3) { // erste Reihe ist noch nicht voll
		$nextone[] = array('uid' => $sponsor_id);
	} else {
	
		$second_level_counts = getSecondLevelCount($sponsor_id);
		if ($second_level_counts['min_anz'] < 3) { // zweite Reihe ist noch nicht voll
			$nextone[] = array('uid' => $second_level_counts['ids_anz'][0]['host_id']); // den, mit den wenigsten zurück geben
		} else { // zweite Reihe ist voll, wer ist der Nächste? Wer hat noch nicht, wer will nochmal?
			db_set_active('boucado_matrix');	
			// wer sind die 3 Kandidaten?
			$result = db_query("SELECT member_id FROM {boucado_members} WHERE member_id IN (" . $second_level_counts['host_ids'] . ") order by last_hosted asc, member_id");
			$geschafft = 0;
			foreach ($result as $row) {
				$next_id = $result->fetchCol();
				$first_level_count = getFirstLevelCount($next_id[0]);
				if ($first_level_count < 3) {
					$nextone[] = array('uid' => $next_id['0']);
					$geschafft = 1;
					db_set_active();
					return;
				}
			}
			if (!$geschafft) {
				db_set_active('boucado_matrix');
				$result = db_query("SELECT member_id FROM {boucado_members} WHERE member_id IN (" . $second_level_counts['host_ids'] . ") ORDER by rand() LIMIT 1");
				$next_id = $result->fetchCol();
				db_set_active();
				getNextLevelIds($nextone, $next_id[0]);				
			}
			
	 	}
	}
}

// Upline rekursiv bis zur 9. Ebene aktualisieren
function update_upline($member_id, $level = 1) {
	
	if (($member_id == "0") || ($level > 9)) {
		return; 
	} else {
		db_set_active('boucado_matrix');
		$result = db_query("SELECT host_id FROM {boucado_members} WHERE member_id = " . $member_id);
		$host = $result->fetchCol();
		$host_id = $host[0];		
		db_update('boucado_members')
		->fields(array('last_downline' => date("Y-m-d H:i:s", time())))
		->condition('member_id',$host_id,'=')
		->execute();
		db_set_active();
		update_upline($host_id, $level++);		
	}
}

function compareCount($a, $b)
{
  return $a['count'] - $b['count'];
}

function compareIds($a, $b)
{
  return $b['end'] - $a['end'];
}

function compareHosts($a, $b)
{
  return $a['anz'] - $b['anz'];
}

function compareHostIds($a, $b)
{
  return $b['host_id'] - $a['host_id'];
}

function print_pre($p,$titel="") {
	if ($titel<>"") {print $titel . ": ";} 
	print "<pre>";
	print_r($p);
	print "</pre>";
}


function boucado_payment_manually_form($form, &$form_state) {
		
	$form = array();
	
	$form['username'] = array(
          '#type' => 'textfield',
          '#title' => t('username'),
          '#size' => 30,
          '#maxlength' => 60,
          '#autocomplete_path' => 'user/autocomplete',
          '#weight' => -1,
        );
            
	//Query DB for Rows
	db_set_active('boucado_matrix');
    $query = db_select('bonuslevels','b');
    $query->fields('b', array('title', 'brutto',));
	$query->condition('title','FREE','<>');	
    $query->orderBy('order_index', 'ASC');
    $results = $query->execute();
 
	//define rows
	$options = array();
	foreach ($results as $result) {
	    $options[$result->brutto] = $result->title;
	}
	db_set_active();
	
    $form['bonuslevel'] = array(
        '#type' => 'select',
        '#title' => t('Bonuslevel'),
        '#options' => $options,
    );
	         
	$form['transaction_id'] = array(
          '#type' => 'textfield',
          '#title' => t('Transaction ID'),
          '#size' => 30,
          '#maxlength' => 60,
          '#default_value' => 'manually',	
	);
    $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        );
   
   $form['submit']['#validate'][] = 'boucado_payment_manually_form_validate';
   $form['#submit'][] = 'boucado_payment_manually_form_submit';

   return $form;
}

function boucado_payment_manually_form_validate($form, &$form_state) {
  $name = $form_state['values']['username'];
  if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name;", array(':name' => $name))->fetchField()) {
        form_set_error('username', "User '" . $name . "' does not exist.");
   }
}

function boucado_payment_manually_form_submit($form, &$form_state) {
	$message = $form_state['values']['bonuslevel'] . " for user '" . $form_state['values']['username'] . "' paid.";
	boucado_payment_pay('Manuell',$form_state['values']['username'],$form_state['values']['transaction_id'],"Manually",$form_state['values']['bonuslevel'],$message);
}


/**
 * autocomplete helper
 * $string = string for search
 */
function _usernames_autocomplete($string) {
  $matches = array();
  $result = db_select('users', 'u')
    ->fields('u', array('name'))
    ->condition('name', '%' . db_like($string) . '%', 'LIKE')
    ->execute();

  // save the query to matches
  foreach ($result as $row) {
    $matches[$row->name] = check_plain($row->name);
  }

  // Return the result to the form in json
  drupal_json_output($matches);
}


function boucado_payment_success($processor){
	// print_r($_GET);
	// Array ( [tx] => 3PS37413TX528213Y [st] => Completed [amt] => 15.00 [cc] => EUR [cm] => [item_number] => admin [q] => payment/success/PayPal ) 
	// http://boucado.space/payment/success/PayPal?tx=5X6538147B004380C&st=Completed&amt=15.00&cc=EUR&cm=&item_number=admin
	// Danke für Ihre Zahlung. Ihre Transaktion wurde abgeschlossen und Sie erhalten per E-Mail eine Bestätigung für Ihren Kauf. Sie können sich unter <a href='http://www.paypal.com' target='_blank'>www.paypal.com</a> in Ihr Konto einloggen, um die Transaktionsdetails anzuzeigen.
	switch (strtolower($processor)) {
		case 'paypal':
			$danke = t("Your payment with PayPal was successful. The transaction was completed and you will receive an email with the confirmation about your payment. You can login at <a href='http://www.paypal.com' target='_blank'>www.paypal.com</a> and control the transaction details.");
			$danke .= "<br>";
			$danke .= "<p><b>PayPal Transaction ID: " . $_GET['tx'] . "</b></p>";
			boucado_payment_pay('PayPal',$_GET['item_number'],$_GET['tx'],$_GET['st'],$_GET['amt'],$danke);
			break;
		
		default:
			
			break;
	}
	
	return "";
}

function boucado_payment_pay($processor, $username,$transaction_id,$status,$amount,$danke = '') {
		
	$member = boucado_get_userdata($username);
	
	db_set_active('boucado_matrix');

	if ($transaction_id == 'manually') {
		$transaction_id = time();
	}
	
	// transaction_id id testen
	$result = db_query("SELECT transaction_id FROM payments WHERE transaction_id = '" . $transaction_id . "'");
	if ($result->fetchAssoc()) {
		db_set_active();
		drupal_set_message(t("Payment already saved."));
		drupal_set_message($danke);
		return;		
	};
	
	// bonuslevel aktualisieren
	$result = db_query("SELECT title, bid FROM bonuslevels WHERE brutto = '" . $amount ."'");
	$row = $result->fetchAssoc();
	$bonustitle = $row['title'];
	$bonuslevel = $row['bid'];
	
	db_update('boucado_members')
	->fields(array('bonuslevel' => $bonuslevel))
	->condition('username',$username ,'=')
	->execute();

	// Alle Bonuslevels für die Rollen holen
    $query = db_select('bonuslevels','b');
    $query->fields('b', array('title', 'brutto',));
	$query->condition('title','FREE','<>');
    $query->orderBy('order_index', 'ASC');
    $results = $query->execute();
	db_set_active();
	
	foreach ($results as $roles) {
		_remove_role_from_user($member->member_id, $roles->title);
	}
	
	// Benutzer Rolle setzen
	if ($role = user_role_load_by_name($bonustitle)) {
        user_multiple_role_edit(array($member->member_id), 'add_role', $role->rid);
      }
	
	db_set_active('boucado_matrix');	
	// Insert in table
	try {
		$payment_id = db_insert('payments')
			->fields(array('processor','member_id','username','transaction_id','status','amount','bonuslevel'))
			->values(array(
				'processor' => $processor,
				'member_id' => $member->member_id,
				'username' => $username,
				'transaction_id' => $transaction_id,
				'status' => $status,
				'amount' => $amount,
				'bonuslevel' => $bonuslevel))
			->execute();
		db_set_active();
		if ($member->host_id == 1) {
		 	// Member in Matrix platzieren:
			boucado_inMatrix($member->member_id, $member->sponsor_id);
			drupal_set_message("Der Benutzer wurde in der Matrix platziert.");			
		}
		boucado_pay_uplines($payment_id, $transaction_id, $username, $bonuslevel);
		drupal_set_message($danke);
	} catch (PDOException $e) {
		dpm($e->getMessage());
		db_set_active();
		return "Fehler beim Speichern.";
	}
}

function _remove_role_from_user($user, $role_name) {
  // For convenience, we'll allow user ids as well as full user objects.
  if (is_numeric($user)) {
    $user = user_load($user); 
  }
  // Only remove the role if the user already has it.
  $key = array_search($role_name, $user->roles);
  if ($key == TRUE) {
    // Get the rid from the roles table.
    $roles = user_roles(TRUE);
    $rid = array_search($role_name, $roles);
    if ($rid != FALSE) {
      // Make a copy of the roles array, without the deleted one.
      $new_roles = array();
      foreach($user->roles as $id => $name) {
        if ($id != $rid) {
          $new_roles[$id] = $name;
        }
      }
      user_save($user, array('roles' => $new_roles));
    }
  }
}
function boucado_payment_cancel(){
	$cancel = t("<h2>You canceled the payment.</h2>");
	return $cancel;
}

function boucado_pay_uplines($payment_id, $transaction_id, $username, $bonuslevel) {
	$payer = boucado_get_userdata($username);
	pay_upline($payer->username, $payer->upline, $payment_id, $transaction_id, $bonuslevel, 1); 
}

// Upline rekursiv bis zur 9. Ebene aktualisieren
function pay_upline($payer_name, $upline_name, $payment_id, $transaction_id, $payer_bonuslevel, $level) {

	$payer = boucado_get_userdata($payer_name);
	$receiver = boucado_get_userdata($upline_name);
	$admin_name = boucado_get_username(1);

	if ($receiver->member_id == "1") { // der admin
		// admin auszahlen:

		// bonuslevel vergleichen und Betrag holen
		db_set_active('boucado_matrix');
		$sql = "SELECT amount FROM fees WHERE from_bonuslevel=" . $payer_bonuslevel . " AND to_bonuslevel=5";
		$fees = db_query($sql)->fetchCol();
		$amount = $fees[0];
		$adminfee = (10 - $level) * $amount;
		
		$sql = "SELECT title FROM bonuslevels WHERE bid=" . $payer_bonuslevel;
		$result = db_query($sql)->fetchCol();
		$bonus = $result[0];
		
		$description = "TOP";
		
		// Insert in table
		try {		
			db_insert('wallet')
			->fields(array('amount','from_id','from_name','to_id','to_name','type_cash','descr','payment_id','transaction_id', 'level'))
			->values(array(
			'amount' => $adminfee,
			'from_id' => $payer->member_id,
			'from_name' => $payer_name,
			'to_id' => $receiver->member_id,			
			'to_name' => $admin_name,
			'type_cash' => $bonus,
			'descr' => $description,
			'payment_id' => $payment_id,
			'transaction_id' => $transaction_id,
		 	'level' => $level
			))
			->execute();
			db_set_active();
		} catch (PDOException $e) {
			dpm($e->getMessage());
			db_set_active();
		}

		 db_set_active();		
		drupal_set_message($bonus . "(" . $description . "): " . ": " . $payer_name . "->admin" . ": (" . $adminfee . ".00)");
		return;		
	} 
	else if ($level > 9) { // 9 Ebenen und aus
		return; 
	} else {
		$receiver_bonuslevel = $receiver->bonuslevel;
		$next_upline = boucado_get_userdata($receiver->upline);

		/* 
		 * bonuslevel vergleichen und Betrag holen
		 */
		
		db_set_active('boucado_matrix');
		// Wer bekommt von wem wie viel?
		$sql = "SELECT amount FROM fees WHERE from_bonuslevel=" . $payer_bonuslevel . " AND to_bonuslevel=" . $receiver_bonuslevel;
		$fees = db_query($sql)->fetchCol();
		$amount = $fees[0];
		
		// Wie heißt der Bonuslevel?
		$sql = "SELECT title FROM bonuslevels WHERE bid=" . $payer_bonuslevel;
		$result = db_query($sql)->fetchCol();
		$bonus = $result[0];
		
		// Bis zu welcher Tiefe bekommt der Empfänger den Bonus?
		$sql = "SELECT depth FROM bonuslevels WHERE bid=" . $receiver_bonuslevel;
		$result = db_query($sql)->fetchCol();
		$depth = $result[0];
				
		$nextlevel = $level + 1;
				 
		/* 
		 * bonusdifferenz berechnen
		 */
		
		// Gesamtbetrag holen:
		$sql = "SELECT amount FROM fees WHERE from_bonuslevel=" . $payer_bonuslevel . " AND to_bonuslevel=" . $payer_bonuslevel;		
		$result = db_query($sql)->fetchCol();
		$payer_bonus = $result[0];
		// Tatsächlichen Betrag holen:
		$sql = "SELECT amount FROM fees WHERE from_bonuslevel=" . $payer_bonuslevel . " AND to_bonuslevel=" . $receiver_bonuslevel;
		$result = db_query($sql)->fetchCol();
		$receiver_bonus = $result[0];
		// Differenz berechnen:
		$bonusdifference = $payer_bonus - $receiver_bonus;
						 
		/*
		 * Tiefe vergleichen
		 */				 
		
		$description = "OK";
		// Payer hat höheren Bonuslevel als Receiver
		if ($bonusdifference > 0) {
			$description = "DIFF";
		}

		$to_admin = false;
		// Receiver ist "RED" (inaktiv) 
		if ($receiver->status == "red") {
			$description = "RED";
			$to_admin = true;
		}
				
		// Receiver hat zu geringen Level und bekommt nichts mehr vom Level des Payers
		if ($level > $depth) {
			$description = "LEVEL";
			$to_admin = true;
		}
		
		if ($to_admin) {
			$bonusdifference = $amount;
			$amount = 0;
		}
		
		// Insert in table
		try {		
			db_insert('wallet')
			->fields(array('amount','v_amount','from_id','from_name','to_id','to_name','type_cash','descr','payment_id','transaction_id', 'level'))
			->values(array(
			'amount' => $amount,
			'v_amount' => $bonusdifference,
			'from_id' => $payer->member_id,
			'from_name' => $payer_name,
			'to_id' => $receiver->member_id,	
			'to_name' => $upline_name,
			'type_cash' => $bonus,
			'descr' => $description,
			'payment_id' => $payment_id,
			'transaction_id' => $transaction_id,
		 	'level' => $level
			))
			->execute();
			db_set_active();
		 drupal_set_message($bonus . " (" . $description . "): " . $payer_name . "->" . $upline_name . ": (" . $amount . ")");
		} catch (PDOException $e) {
			dpm($e->getMessage());
			db_set_active();
		}

		if ($bonusdifference > 0) { // der admin bekommt den Rest

			db_set_active('boucado_matrix');
			try {		
				db_insert('wallet')
				->fields(array('amount','v_amount','from_id','from_name','to_id','to_name','type_cash','descr','payment_id','transaction_id', 'level'))
				->values(array(
				'amount' => $bonusdifference,
				'v_amount' => '0.00',
				'from_id' => $payer->member_id,
				'from_name' => $payer_name,
				'to_id' => '1',	
				'to_name' => $admin_name,
				'type_cash' => 'ADMIN',
				'descr' => $description,
				'payment_id' => $payment_id,
				'transaction_id' => $transaction_id,
			 	'level' => $level
				))
				->execute();
				db_set_active();
		 		drupal_set_message("ADMIN (" . $description . "): " . $payer_name . "->" . $upline_name . ": (" . $bonusdifference . ")");				
			} catch (PDOException $e) {
				dpm($e->getMessage());
				db_set_active();
			}			
 		}

		 db_set_active();
		pay_upline($payer_name, $next_upline->username, $payment_id, $transaction_id, $payer_bonuslevel, $nextlevel);
 	}
}

function boucado_test_pay_all() {
	boucado_test_pay_all_clear();
// Member holen
	db_set_active('boucado_matrix');
	$query = db_select('boucado_members', 'm');
	$query->fields('m');
	$query->condition('member_id','1','>');
	$result = $query->execute();
	db_set_active();

	foreach ($result as $record) {

		db_set_active('boucado_matrix');
		$sql = "SELECT brutto FROM bonuslevels WHERE bid=" . $record->bonuslevel;
		$result = db_query($sql);
		$bonus = $result->fetchCol();
		
		$transaction_id = rand(1000000,9999999);
		boucado_payment_pay('Manuell', $record->username,$transaction_id,'OK',$bonus[0]);
	}
	

	return "Alle haben bezahlt.";	
}

function boucado_test_pay_all_clear() {
	db_set_active('boucado_matrix');
	$num_deleted = db_delete('payments')->execute();
	$num_deleted = db_delete('wallet')->execute();
	$num_deleted = db_delete('payouts')->execute();
	db_set_active();
	return "Cleared.";
}
	
function boucado_show_wallet($uid) {
global $user;
	
	if($uid!='') { 
		$username = boucado_get_username($uid);
		$userdata = boucado_get_userdata($username);
	} else {
		$username = $user->name;
		$userdata = boucado_get_userdata($username);
	}
	
	drupal_set_title($username . "'s Wallet");
	
	$output = "";
		
	// Summe berechnen:
	db_set_active('boucado_matrix');
	$sql = "SELECT SUM(amount) as total FROM wallet WHERE to_name='" . $username ."'";
	$result = db_query($sql);
	$total = $result->fetchCol();
	db_set_active();
	
	$output .= "<h2>Total: " . $total[0] . "</h2>";
	
	$output .= "<div id='wallet'>";

	$headline = array(
		array('data' => t('From'), 'field' => 'from_name'),
		array('data' => t('Paid'), 'field' => 'amount'),
		array('data' => t('Passed'), 'field' => 'v_amount'),
		array('data' => t('Level'), 'field' => 'type_cash'),
		array('data' => t('Code'), 'field' => 'descr'),
		array('data' => t('Date'), 'field' => 'cash_date', 'sort' => 'desc')
	);

	db_set_active('boucado_matrix');
	$query = db_select('wallet') 
	 ->fields('wallet', array('amount', 'v_amount', 'from_name', 'type_cash','descr','cash_date'))    
	 ->condition('to_name', $username, '=')
	 ->extend('PagerDefault')
	 ->extend('TableSort')
	 ->orderByHeader($headline)
	 ->limit(25);

	 $result = $query->execute()->fetchAll();
	db_set_active();

	$table_rows = array();
  foreach($result as $row) {
    
    $table_rows[] = array(
      array('data' => $row->from_name),
      array('data' => $row->amount),
      array('data' => $row->v_amount),
      array('data' => $row->type_cash),
      array('data' => $row->descr),
      array('data' => $row->cash_date),
    );
         
  }
  
  //return a themed schedule table
  $output .= theme_table(array('header' => $headline,
                           'rows' => $table_rows,
                           'attributes' => array('class' => 'table_dfs', 'width' => '100%'),
                           'caption' => '',
                           'colgroups' => array(),
                           'sticky' => FALSE,
                           'empty' => 'No data is available',
                          )); 
						  	
	$output .= theme('pager', array('tags' => array()));

	$output .= "</div> <!-- wallet -->";
	
// ODER: http://knackforge.com/blog/karalmax/drupal-7-creating-drupal-style-tables-paging-sorting-and-filter
	
	return $output; 	
}

function boucado_payment_withdraw() {
global $user;
	
	$output = "<div id='payouts'>";

	$headline = array(
		array('data' => t('amount')),
		array('data' => t('request date')),
		array('data' => t('payout date')),
		array('data' => t('transaction ID')),
	);

	db_set_active('boucado_matrix');
	$query = db_select('payouts') 
	 ->fields('payouts', array('amount', 'ask_date', 'pay_date', 'transaction_id'))    
	 ->condition('member_id', $user->uid, '=')
	 ->orderBy('payout_id','asc');

	 $result = $query->execute()->fetchAll();
	db_set_active();

	$table_rows[] = array();
	foreach($result as $row) {
		$table_rows[] = array(
			array('data' => $row->amount),
			array('data' => $row->ask_date),
			array('data' => $row->pay_date),
			array('data' => $row->transaction_id),
		);
	}
  
  //return a themed schedule table
  $output .= theme_table(array('header' => $headline,
                           'rows' => $table_rows,
                           'attributes' => array('class' => 'table_dfs', 'width' => '100%'),
                           'caption' => '',
                           'colgroups' => array(),
                           'sticky' => FALSE,
                           'empty' => 'No data is available',
                          )); 
						  
	$output .= "<h2>" . t("Request new withdraw:") ."</h2>";
	$output .= drupal_render(drupal_get_form('boucado_payment_withdraw_form'));
								  
	return $output;
	
}

function boucado_payment_withdraw_form($form, &$form_state) {
global $user; 
	// Summe berechnen:
	db_set_active('boucado_matrix');
	$sql = "SELECT SUM(amount) FROM wallet WHERE to_id='" . $user->uid ."'";
	$result = db_query($sql)->fetchCol();
	$total = $result[0];
	
	$sql = "SELECT SUM(amount) FROM payouts WHERE pay_date IS NULL AND member_id='" . $user->uid ."'";
	$result = db_query($sql)->fetchCol();
	$requested = $result[0];
	
	db_set_active();
	
	$form = array();
	
	$form['amount'] = array(
          '#type' => 'textfield',
          '#title' => t('Amount to withdraw:'),
          '#size' => 10,
          '#maxlength' => 10,
          '#default_value' => $total - $requested,
        );
            

    $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        );
   
   $form['submit']['#validate'][] = 'boucado_payment_withdraw_form_validate';
   $form['#submit'][] = 'boucado_payment_withdraw_form_submit';

   return $form;	
}

function boucado_payment_withdraw_form_validate($form, &$form_state) {
global $user;
	// Summe berechnen:
	db_set_active('boucado_matrix');
	$sql = "SELECT SUM(amount) as total FROM wallet WHERE to_name='" . $user->name ."'";
	$result = db_query($sql)->fetchCol();
	$total = $result[0];
	
	$sql = "SELECT SUM(amount) FROM payouts WHERE pay_date IS NULL AND member_id='" . $user->uid ."'";
	$result = db_query($sql)->fetchCol();
	$requested = $result[0];
		
	db_set_active();

	$amount = $form_state['values']['amount'];
	if ($amount > $total - $requested) {
        form_set_error('amount', t("You don't have so much credit."));
   	}
}

function boucado_payment_withdraw_form_submit($form, &$form_state) {
global $user;	
	$amount = $form_state['values']['amount'];
	db_set_active('boucado_matrix');
	try {		
		db_insert('payouts')
		->fields(array('member_id','username','amount'))
		->values(array(
		'member_id' => $user->uid,
		'username' => $user->name,
		'amount' => $amount,
		))
		->execute();
		db_set_active();
 		drupal_set_message($amount . " EUR " . t("for withdraw requested."));				
	} catch (PDOException $e) {
		dpm($e->getMessage());
		db_set_active();
	}	
	db_set_active();
}


function boucado_payment_withdraw_admin (){
	
// http://knackforge.com/blog/selvam/drupal-7-creating-editable-table-form-api
	
}

function boucado_payments_mypayments($uid) {
global $user;

	if($uid!='') {
		$userdata = boucado_get_userdata($uid);
		$uid = $userdata->member_id;
	} else {
		$uid = $user->uid;
		$userdata = boucado_get_userdata($uid);
	}	
	
	$output = "<div id='payments'>";

	$headline = array(
		array('data' => t('Processor')),
		array('data' => t('Transaction ID')),
		array('data' => t('Status'), 'field' => 'status'),
		array('data' => t('Level'), 'field' => 'title'),
		array('data' => t('Fee')),
		array('data' => t('Currency')),
		array('data' => t('Date'), 'field' => 'date_time', 'sort' => 'desc')
	);

	db_set_active('boucado_matrix');
	$query = db_select('payments','p');
	$query = $query->extend('PagerDefault')->extend('TableSort');	
	$query->join('bonuslevels','b','p.bonuslevel=b.bid');
	$query->fields('p', array('processor', 'transaction_id', 'status', 'amount','currency','date_time'));
	$query->fields('b', array('title'));
	$query->condition('p.member_id', $uid, '=');
	$query->orderByHeader($headline);
	$query->limit(25);

	 $result = $query->execute()->fetchAll();

	db_set_active();

	$table_rows[] = array();
  foreach($result as $row) {
    
    $table_rows[] = array(
      array('data' => $row->processor),
      array('data' => $row->transaction_id),
      array('data' => $row->status),
      array('data' => $row->title),
      array('data' => $row->amount),
      array('data' => $row->currency),
      array('data' => $row->date_time),      
    );
         
  }
  
  //return a themed schedule table
  $output .= theme_table(array('header' => $headline,
                           'rows' => $table_rows,
                           'attributes' => array('class' => 'table_dfs', 'width' => '100%'),
                           'caption' => '',
                           'colgroups' => array(),
                           'sticky' => FALSE,
                           'empty' => 'No data is available',
                          )); 
						  	
	$output .= theme('pager', array('tags' => array()));

	$output .= "</div> <!-- payments -->";
	
	$output .= "<div style='background-color:" . $userdata->status . ";border:1px solid #999;padding:0.5em;'>" . t("My Status: ") . t($userdata->status) ."</div>";	
	
	if ($userdata->status != 'white') {
		$output .= "<h2>" . t("Make new payment:") ."</h2>";
		$output .= drupal_render(drupal_get_form('boucado_payment_pay_form'));
	}
	
	return $output;
}

function boucado_payment_pay_form($form, &$form_state) {
global $user;

	$member=boucado_get_userdata($user->name);
	//$paypal_email = "payment-facilitator@boucado.space";
	$paypal_email = "payment@boucado.space";
	$item_name = "BOUCADO MEMBERSHIP";
	$item_number = $member->username;
	$amount = '18.00';

	db_set_active('boucado_matrix');
	$sql = "SELECT title, brutto FROM boucado_members m, bonuslevels b WHERE m.bonuslevel = b.bid AND m.member_id='" . $user->uid . "'";
	$levels = db_query($sql)->fetchAll();
	$bonusjetzt = $levels[0]->brutto;		

	//Alle Bonuslevels (ausser FREE) holen:
    $query = db_select('bonuslevels','b');
    $query->fields('b', array('title', 'brutto',));
	$query->condition('title','FREE','<>');
    $query->orderBy('order_index', 'ASC');
    $results = $query->execute();

	//define rows
	$options = array();
	foreach ($results as $result) {
	    $options[$result->brutto] = $result->title;
	}
	db_set_active();
	
	$form = array();

    $form['amount'] = array( 
        '#type' => 'select',
        '#title' => t('Bonuslevel'),
        '#description' => t('Pament for bonuslevel.'),
        '#options' => $options,
        '#default_value' => $bonusjetzt,
    );
	
	$form['cmd'] = array('#type'=>'hidden', '#value'=>"_xclick",);
	$form['business'] = array('#type'=>'hidden', '#value'=>$paypal_email,);
	
	$form['item_name'] = array('#type'=>'hidden', '#value'=>$item_name,);
	$form['item_number'] = array('#type'=>'hidden', '#value'=>$item_number,);
	 
	$form['shipping'] = array('#type'=>'hidden', '#value'=>"0.00",);
	$form['shipping2'] = array('#type'=>'hidden', '#value'=>"0.00",);
	$form['currency_code'] = array('#type'=>'hidden', '#value'=>"EUR",);
	 
	$form['first_name'] = array('#type'=>'hidden', '#value'=>$member->first_name,);
	$form['last_name'] = array('#type'=>'hidden', '#value'=>$member->last_name,);
	$form['address1'] = array('#type'=>'hidden', '#value'=>$member->street,);
	$form['city'] = array('#type'=>'hidden', '#value'=>$member->city,);
	$form['zip'] = array('#type'=>'hidden', '#value'=>$member->postal,);
	$form['lc'] = array('#type'=>'hidden', '#value'=>$member->country,);
	$form['email'] = array('#type'=>'hidden', '#value'=>$member->email,);
	$form['night_phone_a'] = array('#type'=>'hidden', '#value'=>$member->phone,);
	
	$form['return'] = array('#type'=>'hidden', '#value'=>'http://boucado.space/payment/success/paypal',);
	$form['notify_url'] = array('#type'=>'hidden', '#value'=>'http://boucado.space/boucado_paypal_ipn.php',);
	
	$form['#method'] = 'post';
	//$form['#action']  = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
	$form['#action']  = 'https://www.paypal.com/cgi-bin/webscr';
	
    $form['submit'] = array('#type' => 'submit','#value' => t('Submit'),);
	$form['submit']['#validate'][] = 'boucado_payment_pay_form_validate';
	$form['#submit'][] = 'boucado_payment_pay_form_submit';
	
	return $form;
}

function boucado_payment_pay_form_validate($form, &$form_state) {
	
}

function boucado_payment_pay_form_submit($form, &$form_state) {
	//$form_state['redirect']  = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
	$form_state['redirect']  = 'https://www.paypal.com/cgi-bin/webscr';
}

